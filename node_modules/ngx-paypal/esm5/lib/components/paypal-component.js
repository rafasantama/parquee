/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, ElementRef, Input, ViewChild, } from '@angular/core';
import { interval, Subject } from 'rxjs';
import { map, takeUntil } from 'rxjs/operators';
import { PayPalFunding } from '../models/paypal-funding';
import { PayPalIntegrationType } from '../models/paypal-integration';
import { PayPalConfig } from '../models/paypal-models';
var NgxPaypalComponent = /** @class */ (function () {
    function NgxPaypalComponent() {
        /**
         * Indicates if global configuration (provided via 'forRoot') is used
         */
        this.useGlobalConfig = false;
        /**
         * Used for indicating delayed rendered if container is not yet ready in DOM
         */
        this.registerPayPalScriptWhenContainerIsReady = false;
        /**
         * Polling interval if paypal script is pending
         */
        this.defaultPollInterval = 50;
        /**
         * Polling will stop after polling reaches this number
         */
        this.maximumPollWaitTime = 5000;
        /**
         * Name of the global variable where paypal is stored
         */
        this.paypalWindowName = 'paypal';
        /**
         * Name of the global variable indicating that script was initiated (added to page)
         */
        this.paypalWindowScriptInitiated = 'ngx-paypal-script-initiated';
        /**
         * PayPal integration script url
         */
        this.paypalScriptUrl = 'https://www.paypalobjects.com/api/checkout.js';
        this.payPalButtonContainerIdPrefix = 'ngx-paypal-button-container-';
        this.ngUnsubscribe = new Subject();
    }
    Object.defineProperty(NgxPaypalComponent.prototype, "payPalButtonContainerElem", {
        set: /**
         * @param {?} content
         * @return {?}
         */
        function (content) {
            if (content) {
                this._payPalButtonContainerElem = content;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    NgxPaypalComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        // init when config once its available
        if (this.config) {
            this.initPayPal();
        }
    };
    /**
     * @return {?}
     */
    NgxPaypalComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        // register script if element is ready in dom
        if (this.registerPayPalScriptWhenContainerIsReady && this._payPalButtonContainerElem) {
            this.setupScript();
            this.registerPayPalScriptWhenContainerIsReady = false;
        }
    };
    /**
     * @return {?}
     */
    NgxPaypalComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.ngUnsubscribe.next();
        this.ngUnsubscribe.complete();
    };
    /**
     * @return {?}
     */
    NgxPaypalComponent.prototype.initPayPal = /**
     * @return {?}
     */
    function () {
        // set unique paypal container button id
        this.payPalButtonContainerId = "" + this.payPalButtonContainerIdPrefix + this.getPseudoUniqueNumber();
        // check if paypal was already register and if so, don't add it to page again
        if (!window[this.paypalWindowName]) {
            // check if script is pending
            if (window[this.paypalWindowScriptInitiated] === true) {
                this.pollUntilScriptAvailable();
            }
            else {
                // register script and set global flag
                window[this.paypalWindowScriptInitiated] = true;
                this.addPayPalScriptToPage();
            }
        }
        else {
            // just register payment
            this.handleScriptRegistering();
        }
    };
    /**
     * @return {?}
     */
    NgxPaypalComponent.prototype.getPseudoUniqueNumber = /**
     * @return {?}
     */
    function () {
        return new Date().valueOf();
    };
    /**
     * Used when there are multiple paypal components on the same page beacuse only 1 of them
     * may register paypal script. The other has to be polling until paypal is available or component destroyed
     * @return {?}
     */
    NgxPaypalComponent.prototype.pollUntilScriptAvailable = /**
     * Used when there are multiple paypal components on the same page beacuse only 1 of them
     * may register paypal script. The other has to be polling until paypal is available or component destroyed
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var obs = interval(this.defaultPollInterval)
            .pipe(takeUntil(this.ngUnsubscribe), map(function (x) {
            if (x >= _this.maximumPollWaitTime) {
                console.warn("PayPal script was not loaded after '" + _this.maximumPollWaitTime + "' maximum polling time.");
                obs.unsubscribe();
                return;
            }
            // check if paypal script exists
            if (window[_this.paypalWindowName]) {
                // register script
                // register script
                _this.handleScriptRegistering();
                // stop execution
                obs.unsubscribe();
            }
        }))
            .subscribe();
    };
    /**
     * @return {?}
     */
    NgxPaypalComponent.prototype.addPayPalScriptToPage = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var script = document.createElement('script');
        script.innerHTML = '';
        script.src = this.paypalScriptUrl;
        script.onload = function () { return _this.handleScriptRegistering(); };
        script.async = true;
        script.defer = true;
        this.paypalScriptElem.nativeElement.appendChild(script);
    };
    /**
     * @return {?}
     */
    NgxPaypalComponent.prototype.handleScriptRegistering = /**
     * @return {?}
     */
    function () {
        // check if container with requested id exists
        // this is here because dynamically switching between components would cause PayPal to
        // throw an error if the container already existed before
        if (this._payPalButtonContainerElem && this._payPalButtonContainerElem.nativeElement &&
            this._payPalButtonContainerElem.nativeElement.id === this.payPalButtonContainerId) {
            // container is ready, setup script right away
            this.setupScript();
        }
        else {
            // container is not ready, delay registering until it is
            this.registerPayPalScriptWhenContainerIsReady = true;
        }
    };
    /**
     * @return {?}
     */
    NgxPaypalComponent.prototype.setupScript = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // first clear container
        if (!this._payPalButtonContainerElem) {
            throw Error("Cannot setup script because paypal button container with id '" + this.payPalButtonContainerId + "' is not yet ready");
        }
        this._payPalButtonContainerElem.nativeElement.innerHTML = '';
        if (!window[this.paypalWindowName]) {
            throw Error('PayPal script is not available');
        }
        // render PayPal button as per their docs at
        // https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/add-paypal-button/
        window[this.paypalWindowName].Button.render({
            // set environment
            env: this.config.environment.toString(),
            // Show the buyer a 'Pay Now' button in the checkout flow
            commit: this.config.commit,
            // init client for client side integration
            client: this.getClient(),
            // set button config if available
            style: this.config.button,
            // set funding if available
            funding: this.getFunding(),
            // payment() is called when the button is clicked
            payment: function (data, actions) {
                if (_this.config.integrationType === PayPalIntegrationType.ServerSideREST) {
                    // client needs to create payment on server side
                    if (!_this.config.payment) {
                        throw Error("You need set up a create payment method and return\n                            PayPal's payment id when using server side integration");
                    }
                    // Paypal expects promise with payment id (string) to be returned
                    return _this.config.payment().toPromise()
                        .then(function (paymentId) {
                        return paymentId;
                    });
                }
                if (_this.config.integrationType === PayPalIntegrationType.ClientSideREST) {
                    if (!_this.config.transactions || !Array.isArray(_this.config.transactions) || _this.config.transactions.length <= 0) {
                        throw Error("You need to provide at least 1 transaction for client side integration");
                    }
                    /** @type {?} */
                    var experienceConfig = _this.config.experience;
                    return actions.payment.create({
                        payment: {
                            transactions: _this.config.transactions
                        },
                        experience: {
                            input_fields: {
                                no_shipping: (experienceConfig && experienceConfig.noShipping) ? 1 : 0
                            },
                            presentation: {
                                brand_name: (experienceConfig && experienceConfig.brandName) ? experienceConfig.brandName : null,
                                logo_image: (experienceConfig && experienceConfig.logoImage) ? experienceConfig.logoImage : null,
                                locale_code: (experienceConfig && experienceConfig.localeCode) ? experienceConfig.localeCode : null
                            }
                        }
                    });
                }
            },
            // onAuthorize() is called when the buyer approves the payment
            onAuthorize: function (data, actions) {
                if (_this.config.integrationType === PayPalIntegrationType.ServerSideREST) {
                    // client needs to server to execute the payment
                    if (!_this.config.onAuthorize) {
                        throw Error("You need set up an execute method when using server side integration");
                    }
                    // Paypal expects promise
                    return _this.config.onAuthorize(data, actions).toPromise();
                }
                if (_this.config.integrationType === PayPalIntegrationType.ClientSideREST) {
                    // Make a call to the REST api to execute the payment
                    return actions.payment.execute().then(function () {
                        if (!_this.config.onPaymentComplete) {
                            throw Error("You should provide some callback when payment is finished when using client side integration");
                        }
                        _this.config.onPaymentComplete(data, actions);
                    });
                }
            },
            onError: function (err) {
                if (_this.config.onError) {
                    _this.config.onError(err);
                }
            },
            onCancel: function (data, actions) {
                if (_this.config.onCancel) {
                    _this.config.onCancel(data, actions);
                }
            },
            onClick: function () {
                if (_this.config.onClick) {
                    _this.config.onClick();
                }
            },
            validate: function (actions) {
                if (_this.config.validate) {
                    _this.config.validate(actions);
                }
            }
        }, "#" + this.payPalButtonContainerId);
    };
    /**
     * @return {?}
     */
    NgxPaypalComponent.prototype.getClient = /**
     * @return {?}
     */
    function () {
        if (this.config.integrationType === PayPalIntegrationType.ClientSideREST) {
            if (!this.config.client) {
                throw Error("You need to setup client information when using client side integration");
            }
            return {
                production: this.config.client.production,
                sandbox: this.config.client.sandbox
            };
        }
        return undefined;
    };
    /**
     * @return {?}
     */
    NgxPaypalComponent.prototype.getFunding = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // resolve funding to use paypal's properties
        if (!this.config.funding) {
            // no funding provided
            return undefined;
        }
        /** @type {?} */
        var allowed = [];
        /** @type {?} */
        var disallowed = [];
        if (this.config.funding.allowed) {
            this.config.funding.allowed.forEach(function (type) {
                allowed.push(_this.mapFundingType(type));
            });
        }
        if (this.config.funding.disallowed) {
            this.config.funding.disallowed.forEach(function (type) {
                disallowed.push(_this.mapFundingType(type));
            });
        }
        return {
            allowed: allowed,
            disallowed: disallowed
        };
    };
    /**
     * @param {?} type
     * @return {?}
     */
    NgxPaypalComponent.prototype.mapFundingType = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        if (type === PayPalFunding.Card) {
            return paypal.FUNDING.CARD;
        }
        if (type === PayPalFunding.Credit) {
            return paypal.FUNDING.CREDIT;
        }
        if (type === PayPalFunding.Elv) {
            return paypal.FUNDING.ELV;
        }
        throw Error("Unsupported funding type '" + type + "'");
    };
    NgxPaypalComponent.decorators = [
        { type: Component, args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'ngx-paypal',
                    template: "\n    <div #payPalScriptElem></div>\n    <div #payPalButtonContainerElem [id]=\"payPalButtonContainerId\"></div>\n    "
                }] }
    ];
    /** @nocollapse */
    NgxPaypalComponent.ctorParameters = function () { return []; };
    NgxPaypalComponent.propDecorators = {
        config: [{ type: Input }],
        useGlobalConfig: [{ type: Input }],
        paypalScriptElem: [{ type: ViewChild, args: ['payPalScriptElem',] }],
        payPalButtonContainerElem: [{ type: ViewChild, args: ['payPalButtonContainerElem',] }]
    };
    return NgxPaypalComponent;
}());
export { NgxPaypalComponent };
if (false) {
    /**
     * Configuration for paypal.
     * @type {?}
     */
    NgxPaypalComponent.prototype.config;
    /**
     * Indicates if global configuration (provided via 'forRoot') is used
     * @type {?}
     */
    NgxPaypalComponent.prototype.useGlobalConfig;
    /**
     * Container for paypal script
     * @type {?}
     */
    NgxPaypalComponent.prototype.paypalScriptElem;
    /**
     * Used for indicating delayed rendered if container is not yet ready in DOM
     * @type {?}
     */
    NgxPaypalComponent.prototype.registerPayPalScriptWhenContainerIsReady;
    /**
     * Holds current container element
     * @type {?}
     */
    NgxPaypalComponent.prototype._payPalButtonContainerElem;
    /**
     * Polling interval if paypal script is pending
     * @type {?}
     */
    NgxPaypalComponent.prototype.defaultPollInterval;
    /**
     * Polling will stop after polling reaches this number
     * @type {?}
     */
    NgxPaypalComponent.prototype.maximumPollWaitTime;
    /**
     * Name of the global variable where paypal is stored
     * @type {?}
     */
    NgxPaypalComponent.prototype.paypalWindowName;
    /**
     * Name of the global variable indicating that script was initiated (added to page)
     * @type {?}
     */
    NgxPaypalComponent.prototype.paypalWindowScriptInitiated;
    /**
     * PayPal integration script url
     * @type {?}
     */
    NgxPaypalComponent.prototype.paypalScriptUrl;
    /**
     * Id of the element where PayPal button will be rendered
     * @type {?}
     */
    NgxPaypalComponent.prototype.payPalButtonContainerId;
    /** @type {?} */
    NgxPaypalComponent.prototype.payPalButtonContainerIdPrefix;
    /** @type {?} */
    NgxPaypalComponent.prototype.ngUnsubscribe;
}

//# sourceMappingURL=data:application/json;base64,