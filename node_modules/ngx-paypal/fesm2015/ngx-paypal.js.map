{"version":3,"file":"ngx-paypal.js.map","sources":["ng://ngx-paypal/lib/models/paypal-funding.ts","ng://ngx-paypal/lib/models/paypal-integration.ts","ng://ngx-paypal/lib/models/paypal-models.ts","ng://ngx-paypal/lib/components/paypal-component.ts","ng://ngx-paypal/lib/ngx-paypal.module.ts","ng://ngx-paypal/lib/models/paypal-environment.ts"],"sourcesContent":["export enum PayPalFunding {\r\n    Card,\r\n    Credit,\r\n    Elv\r\n}\r\n","export enum PayPalIntegrationType {\r\n    ClientSideREST,\r\n    ServerSideREST,\r\n}\r\n","import { Observable } from 'rxjs';\r\n\r\nimport { PayPalFunding } from './paypal-funding';\r\nimport { PayPalEnvironment } from './paypal-environment';\r\nimport { PayPalIntegrationType } from './paypal-integration';\r\n\r\nexport class PayPalConfig {\r\n\r\n    /**\r\n     * Show 'Pay Now' button config\r\n     */\r\n    public commit = true;\r\n\r\n    /**\r\n     * Called to create new payment for server side integration\r\n     */\r\n    public payment?: () => Observable<string>;\r\n\r\n    /**\r\n     * Called to execute payment for server side integration\r\n     */\r\n    public onAuthorize?: (data: IPayPalPaymentCompleteData, actions: any) => Observable<void>;\r\n\r\n    /**\r\n     * Client tokens for client side integration\r\n     */\r\n    public client?: IPaypalClient;\r\n\r\n    /**\r\n     * Array of transaction, required for client side integration\r\n     */\r\n    public transactions?: IPayPalTransaction[];\r\n\r\n    /**\r\n     * Payment Experience configurations\r\n     */\r\n    public experience?: IPayPalExperience;\r\n\r\n    /**\r\n     * Called for client side integration when payment is executed\r\n     */\r\n    public onPaymentComplete?: (data: IPayPalPaymentCompleteData, actions: any) => void;\r\n\r\n    /**\r\n     * Button configuration\r\n     */\r\n    public button?: IPayPalButtonStyle;\r\n\r\n    /**\r\n     * Paypal funding configuration\r\n     */\r\n    public funding?: IPayPalFunding;\r\n\r\n    /**\r\n     * Called when PayPal experiences an error\r\n     */\r\n    public onError?: (err: any) => void;\r\n\r\n    /**\r\n     * This handler will be called for every click on the PayPal button\r\n     */\r\n    public onClick?: () => void;\r\n\r\n    /**\r\n     * Called when user cancels payment\r\n     */\r\n    public onCancel?: (data: IPayPalCancelPayment, actions: any) => void;\r\n\r\n    /**\r\n     * Can be used to validation as can be seen here: https://developer.paypal.com/demo/checkout/#/pattern/validation\r\n     */\r\n    public validate?: (actions: any) => void;\r\n\r\n    constructor(\r\n        /**\r\n         * Type of the integration\r\n         */\r\n        public integrationType: PayPalIntegrationType,\r\n        /**\r\n         * Environment\r\n         */\r\n        public environment: PayPalEnvironment,\r\n        config: {\r\n            onError?: (err: any) => void,\r\n            onClick?: () => void,\r\n            validate?: (actions: any) => void;\r\n            onCancel?: (data: IPayPalCancelPayment, actions: any) => void,\r\n            payment?: () => Observable<string>,\r\n            onAuthorize?: (data: IPayPalPaymentCompleteData, actions: any) => Observable<void>,\r\n            client?: IPaypalClient,\r\n            onPaymentComplete?: (data: IPayPalPaymentCompleteData, actions: any) => void,\r\n            transactions?: IPayPalTransaction[],\r\n            note_to_payer?: string;\r\n            experience?: IPayPalExperience,\r\n            commit?: boolean,\r\n            button?: IPayPalButtonStyle,\r\n            funding?: IPayPalFunding\r\n        }) {\r\n        Object.assign(this, config);\r\n    }\r\n}\r\n\r\nexport interface IPayPalPaymentCompleteData {\r\n    intent: string;\r\n    orderID: string;\r\n    payerID: string;\r\n    paymentID: string;\r\n    paymentToken: string;\r\n    returnUrl: string;\r\n}\r\n\r\nexport interface IPayPalCancelPayment {\r\n    data: IPayPalCancelPaymentData;\r\n    actions: any;\r\n}\r\n\r\nexport interface IPayPalCancelPaymentData {\r\n    billingID: string;\r\n    cancelUrl: string;\r\n    intent: string;\r\n    paymentID: string;\r\n    paymentToken: string;\r\n}\r\n\r\nexport interface IPaypalClient {\r\n    sandbox?: string;\r\n    production?: string;\r\n}\r\n\r\nexport interface IPayPalTransaction {\r\n    amount: IPayPalAmount;\r\n    description?: string;\r\n    custom?: string;\r\n    payment_options?: IPayPalTransactionPaymentOptions;\r\n    soft_descriptor?: string;\r\n    item_list?: IPayPalTransactionItemList;\r\n}\r\n\r\nexport interface IPayPalTransactionItemList {\r\n    items?: IPayPalTransactionItem[];\r\n    shipping_address?: IPayPalTransactionShippingAddress;\r\n}\r\n\r\nexport interface IPayPalTransactionItem {\r\n    name: string;\r\n    currency: string;\r\n    price: number;\r\n    quantity: number;\r\n\r\n    description?: string;\r\n    tax?: number;\r\n    sku?: string;\r\n}\r\n\r\nexport interface IPayPalAmount {\r\n    total: number;\r\n    currency: string;\r\n    details?: IPayPalAmountDetails;\r\n}\r\n\r\nexport interface IPayPalTransactionShippingAddress {\r\n    recipient_name: string;\r\n    line1: string;\r\n    line2?: string;\r\n    city: string;\r\n    country_code: string;\r\n    postal_code: string;\r\n    phone: string;\r\n    state: string;\r\n}\r\n\r\nexport interface IPayPalAmountDetails {\r\n    subtotal: number;\r\n    tax: number;\r\n    shipping: number;\r\n    handling_fee: number;\r\n    shipping_discount: number;\r\n    insurance: number;\r\n}\r\n\r\nexport interface IPayPalTransactionPaymentOptions {\r\n    allowed_payment_method?: string;\r\n}\r\n\r\nexport interface IPayPalExperience {\r\n    /** Indicates whether PayPal displays shipping address fields on the experience pages */\r\n    noShipping?: boolean;\r\n    /** A label that overrides the business name in the PayPal account on the PayPal pages. Max length: 127 characters. */\r\n    brandName?: string;\r\n    /** URL to the logo image (gif, jpg, or png). The image's maximum width is 190 pixels and maximum height is 60 pixels. */\r\n    logoImage?: string;\r\n    /** Locale in which to display PayPal page */\r\n    localeCode?: string;\r\n}\r\n\r\nexport interface IPayPalButtonStyle {\r\n    label?: 'checkout' | 'pay' | 'buynow' | 'paypal';\r\n    size?: 'small' | 'medium' | 'large' | 'responsive';\r\n    shape?: 'pill' | 'rect';\r\n    color?: 'gold' | 'blue' | 'silver' | 'black';\r\n    layout?: 'horizontal' | 'vertical';\r\n    tagline?: false;\r\n    fundingicons?: boolean;\r\n    branding?: boolean;\r\n}\r\n\r\nexport interface IPayPalFunding {\r\n    allowed: PayPalFunding[];\r\n    disallowed: PayPalFunding[];\r\n}\r\n\r\n","import {\r\n    AfterViewInit,\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ElementRef,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    SimpleChanges,\r\n    ViewChild,\r\n} from '@angular/core';\r\nimport { interval, Subject } from 'rxjs';\r\nimport { map, takeUntil } from 'rxjs/operators';\r\n\r\nimport { PayPalFunding } from '../models/paypal-funding';\r\nimport { PayPalIntegrationType } from '../models/paypal-integration';\r\nimport { IPaypalClient, IPayPalPaymentCompleteData, PayPalConfig } from '../models/paypal-models';\r\n\r\n/**\r\n * Global variable where PayPal is loaded to\r\n */\r\ndeclare var paypal: any;\r\n\r\n@Component({\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    selector: 'ngx-paypal',\r\n    template: `\r\n    <div #payPalScriptElem></div>\r\n    <div #payPalButtonContainerElem [id]=\"payPalButtonContainerId\"></div>\r\n    `\r\n})\r\nexport class NgxPaypalComponent implements OnChanges, AfterViewInit, OnDestroy {\r\n\r\n    /**\r\n     * Configuration for paypal.\r\n     */\r\n    @Input() config: PayPalConfig;\r\n\r\n    /**\r\n     * Indicates if global configuration (provided via 'forRoot') is used\r\n     */\r\n    @Input() useGlobalConfig = false;\r\n\r\n    /**\r\n     * Container for paypal script\r\n     */\r\n    @ViewChild('payPalScriptElem') paypalScriptElem: ElementRef;\r\n\r\n    /**\r\n     * Used for indicating delayed rendered if container is not yet ready in DOM\r\n     */\r\n    private registerPayPalScriptWhenContainerIsReady = false;\r\n\r\n    /**\r\n     * Holds current container element\r\n     */\r\n    private _payPalButtonContainerElem?: ElementRef;\r\n    @ViewChild('payPalButtonContainerElem') set payPalButtonContainerElem(content: ElementRef) {\r\n        if (content) {\r\n            this._payPalButtonContainerElem = content;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Polling interval if paypal script is pending\r\n     */\r\n    private readonly defaultPollInterval = 50;\r\n\r\n    /**\r\n     * Polling will stop after polling reaches this number\r\n     */\r\n    private readonly maximumPollWaitTime = 5000;\r\n\r\n    /**\r\n    * Name of the global variable where paypal is stored\r\n    */\r\n    private readonly paypalWindowName = 'paypal';\r\n\r\n    /**\r\n     * Name of the global variable indicating that script was initiated (added to page)\r\n     */\r\n    private readonly paypalWindowScriptInitiated = 'ngx-paypal-script-initiated';\r\n\r\n    /**\r\n     * PayPal integration script url\r\n     */\r\n    private readonly paypalScriptUrl = 'https://www.paypalobjects.com/api/checkout.js';\r\n\r\n    /**\r\n     * Id of the element where PayPal button will be rendered\r\n     */\r\n    public payPalButtonContainerId?: string;\r\n\r\n    private readonly payPalButtonContainerIdPrefix = 'ngx-paypal-button-container-';\r\n\r\n    private readonly ngUnsubscribe: Subject<void> = new Subject<void>();\r\n\r\n    constructor(\r\n    ) {\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        // init when config once its available\r\n        if (this.config) {\r\n            this.initPayPal();\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        // register script if element is ready in dom\r\n        if (this.registerPayPalScriptWhenContainerIsReady && this._payPalButtonContainerElem) {\r\n            this.setupScript();\r\n            this.registerPayPalScriptWhenContainerIsReady = false;\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n\r\n    private initPayPal(): void {\r\n        // set unique paypal container button id\r\n        this.payPalButtonContainerId = `${this.payPalButtonContainerIdPrefix}${this.getPseudoUniqueNumber()}`;\r\n        // check if paypal was already register and if so, don't add it to page again\r\n        if (!window[this.paypalWindowName]) {\r\n            // check if script is pending\r\n            if (window[this.paypalWindowScriptInitiated] === true) {\r\n                this.pollUntilScriptAvailable();\r\n            } else {\r\n                // register script and set global flag\r\n                window[this.paypalWindowScriptInitiated] = true;\r\n                this.addPayPalScriptToPage();\r\n            }\r\n\r\n        } else {\r\n            // just register payment\r\n            this.handleScriptRegistering();\r\n        }\r\n    }\r\n\r\n    private getPseudoUniqueNumber(): number {\r\n        return new Date().valueOf();\r\n    }\r\n\r\n    /**\r\n     * Used when there are multiple paypal components on the same page beacuse only 1 of them\r\n     * may register paypal script. The other has to be polling until paypal is available or component destroyed\r\n     */\r\n    private pollUntilScriptAvailable(): void {\r\n        const obs = interval(this.defaultPollInterval)\r\n            .pipe(\r\n                takeUntil(this.ngUnsubscribe),\r\n                map((x) => {\r\n                    if (x >= this.maximumPollWaitTime) {\r\n                        console.warn(`PayPal script was not loaded after '${this.maximumPollWaitTime}' maximum polling time.`);\r\n                        obs.unsubscribe();\r\n                        return;\r\n                    }\r\n\r\n                    // check if paypal script exists\r\n                    if (window[this.paypalWindowName]) {\r\n                        // register script\r\n                        this.handleScriptRegistering();\r\n\r\n                        // stop execution\r\n                        obs.unsubscribe();\r\n                    }\r\n                })\r\n            )\r\n            .subscribe();\r\n    }\r\n\r\n    private addPayPalScriptToPage(): void {\r\n        const script = document.createElement('script');\r\n        script.innerHTML = '';\r\n        script.src = this.paypalScriptUrl;\r\n        script.onload = () => this.handleScriptRegistering();\r\n        script.async = true;\r\n        script.defer = true;\r\n\r\n        this.paypalScriptElem.nativeElement.appendChild(script);\r\n    }\r\n\r\n    private handleScriptRegistering(): void {\r\n        // check if container with requested id exists\r\n        // this is here because dynamically switching between components would cause PayPal to\r\n        // throw an error if the container already existed before\r\n        if (this._payPalButtonContainerElem && this._payPalButtonContainerElem.nativeElement &&\r\n            this._payPalButtonContainerElem.nativeElement.id === this.payPalButtonContainerId) {\r\n            // container is ready, setup script right away\r\n            this.setupScript();\r\n        } else {\r\n            // container is not ready, delay registering until it is\r\n            this.registerPayPalScriptWhenContainerIsReady = true;\r\n        }\r\n    }\r\n\r\n    private setupScript(): void {\r\n        // first clear container\r\n        if (!this._payPalButtonContainerElem) {\r\n            throw Error(`Cannot setup script because paypal button container with id '${this.payPalButtonContainerId}' is not yet ready`);\r\n        }\r\n\r\n        this._payPalButtonContainerElem.nativeElement.innerHTML = '';\r\n\r\n        if (!window[this.paypalWindowName]) {\r\n            throw Error('PayPal script is not available');\r\n        }\r\n\r\n        // render PayPal button as per their docs at\r\n        // https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/add-paypal-button/\r\n        window[this.paypalWindowName].Button.render({\r\n            // set environment\r\n            env: this.config.environment.toString(),\r\n\r\n            // Show the buyer a 'Pay Now' button in the checkout flow\r\n            commit: this.config.commit,\r\n\r\n            // init client for client side integration\r\n            client: this.getClient(),\r\n\r\n            // set button config if available\r\n            style: this.config.button,\r\n\r\n            // set funding if available\r\n            funding: this.getFunding(),\r\n\r\n            // payment() is called when the button is clicked\r\n            payment: (data, actions) => {\r\n                if (this.config.integrationType === PayPalIntegrationType.ServerSideREST) {\r\n                    // client needs to create payment on server side\r\n                    if (!this.config.payment) {\r\n                        throw Error(`You need set up a create payment method and return\r\n                            PayPal's payment id when using server side integration`);\r\n                    }\r\n\r\n                    // Paypal expects promise with payment id (string) to be returned\r\n                    return this.config.payment().toPromise()\r\n                        .then(paymentId => {\r\n                            return paymentId;\r\n                        });\r\n                }\r\n\r\n                if (this.config.integrationType === PayPalIntegrationType.ClientSideREST) {\r\n                    if (!this.config.transactions || !Array.isArray(this.config.transactions) || this.config.transactions.length <= 0) {\r\n                        throw Error(`You need to provide at least 1 transaction for client side integration`);\r\n                    }\r\n\r\n                    const experienceConfig = this.config.experience;\r\n                    return actions.payment.create({\r\n                        payment: {\r\n                            transactions: this.config.transactions\r\n                        },\r\n                        experience: {\r\n                            input_fields: {\r\n                                no_shipping: (experienceConfig && experienceConfig.noShipping) ? 1 : 0\r\n                            },\r\n                            presentation: {\r\n                                brand_name: (experienceConfig && experienceConfig.brandName) ? experienceConfig.brandName : null,\r\n                                logo_image: (experienceConfig && experienceConfig.logoImage) ? experienceConfig.logoImage : null,\r\n                                locale_code: (experienceConfig && experienceConfig.localeCode) ? experienceConfig.localeCode : null\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            },\r\n\r\n            // onAuthorize() is called when the buyer approves the payment\r\n            onAuthorize: (data: IPayPalPaymentCompleteData, actions: any) => {\r\n                if (this.config.integrationType === PayPalIntegrationType.ServerSideREST) {\r\n                    // client needs to server to execute the payment\r\n                    if (!this.config.onAuthorize) {\r\n                        throw Error(`You need set up an execute method when using server side integration`);\r\n                    }\r\n\r\n                    // Paypal expects promise\r\n                    return this.config.onAuthorize(data, actions).toPromise();\r\n                }\r\n\r\n                if (this.config.integrationType === PayPalIntegrationType.ClientSideREST) {\r\n                    // Make a call to the REST api to execute the payment\r\n                    return actions.payment.execute().then(() => {\r\n                        if (!this.config.onPaymentComplete) {\r\n                            throw Error(`You should provide some callback when payment is finished when using client side integration`);\r\n                        }\r\n                        this.config.onPaymentComplete(data, actions);\r\n                    });\r\n                }\r\n            },\r\n\r\n            onError: (err) => {\r\n                if (this.config.onError) {\r\n                    this.config.onError(err);\r\n                }\r\n            },\r\n\r\n            onCancel: (data, actions) => {\r\n                if (this.config.onCancel) {\r\n                    this.config.onCancel(data, actions);\r\n                }\r\n            },\r\n            onClick: () => {\r\n                if (this.config.onClick) {\r\n                    this.config.onClick();\r\n                }\r\n            },\r\n            validate: (actions) => {\r\n                if (this.config.validate) {\r\n                    this.config.validate(actions);\r\n                }\r\n            }\r\n        }, `#${this.payPalButtonContainerId}`);\r\n    }\r\n\r\n    private getClient(): IPaypalClient | undefined {\r\n        if (this.config.integrationType === PayPalIntegrationType.ClientSideREST) {\r\n            if (!this.config.client) {\r\n                throw Error(`You need to setup client information when using client side integration`);\r\n            }\r\n\r\n            return {\r\n                production: this.config.client.production,\r\n                sandbox: this.config.client.sandbox\r\n            };\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    private getFunding(): {\r\n        allowed: any[],\r\n        disallowed: any[]\r\n    } | undefined {\r\n        // resolve funding to use paypal's properties\r\n        if (!this.config.funding) {\r\n            // no funding provided\r\n            return undefined;\r\n        }\r\n\r\n        const allowed: any[] = [];\r\n        const disallowed: any[] = [];\r\n\r\n        if (this.config.funding.allowed) {\r\n            this.config.funding.allowed.forEach(type => {\r\n                allowed.push(this.mapFundingType(type));\r\n            });\r\n        }\r\n\r\n        if (this.config.funding.disallowed) {\r\n            this.config.funding.disallowed.forEach(type => {\r\n                disallowed.push(this.mapFundingType(type));\r\n            });\r\n        }\r\n\r\n        return {\r\n            allowed: allowed,\r\n            disallowed: disallowed\r\n        };\r\n    }\r\n\r\n    private mapFundingType(type: PayPalFunding): any {\r\n        if (type === PayPalFunding.Card) {\r\n            return paypal.FUNDING.CARD;\r\n        }\r\n        if (type === PayPalFunding.Credit) {\r\n            return paypal.FUNDING.CREDIT;\r\n        }\r\n        if (type === PayPalFunding.Elv) {\r\n            return paypal.FUNDING.ELV;\r\n        }\r\n        throw Error(`Unsupported funding type '${type}'`);\r\n    }\r\n}\r\n\r\n","import { NgModule } from '@angular/core';\r\n\r\nimport { NgxPaypalComponent } from './components/paypal-component';\r\n\r\n@NgModule({\r\n  imports: [\r\n  ],\r\n  declarations: [\r\n    NgxPaypalComponent,\r\n  ],\r\n  exports: [\r\n    NgxPaypalComponent,\r\n  ]\r\n})\r\nexport class NgxPayPalModule {\r\n}\r\n\r\n\r\n","export enum PayPalEnvironment {\r\n    Sandbox = 'sandbox',\r\n    Production = 'production'\r\n}\r\n"],"names":[],"mappings":"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"}
