import { ChangeDetectionStrategy, Component, Input, ViewChild, NgModule } from '@angular/core';
import { interval, Subject } from 'rxjs';
import { map, takeUntil } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @enum {number} */
var PayPalFunding = {
    Card: 0,
    Credit: 1,
    Elv: 2,
};
PayPalFunding[PayPalFunding.Card] = 'Card';
PayPalFunding[PayPalFunding.Credit] = 'Credit';
PayPalFunding[PayPalFunding.Elv] = 'Elv';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @enum {number} */
var PayPalIntegrationType = {
    ClientSideREST: 0,
    ServerSideREST: 1,
};
PayPalIntegrationType[PayPalIntegrationType.ClientSideREST] = 'ClientSideREST';
PayPalIntegrationType[PayPalIntegrationType.ServerSideREST] = 'ServerSideREST';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var PayPalConfig = /** @class */ (function () {
    function PayPalConfig(integrationType, environment, config) {
        this.integrationType = integrationType;
        this.environment = environment;
        /**
         * Show 'Pay Now' button config
         */
        this.commit = true;
        Object.assign(this, config);
    }
    return PayPalConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var NgxPaypalComponent = /** @class */ (function () {
    function NgxPaypalComponent() {
        /**
         * Indicates if global configuration (provided via 'forRoot') is used
         */
        this.useGlobalConfig = false;
        /**
         * Used for indicating delayed rendered if container is not yet ready in DOM
         */
        this.registerPayPalScriptWhenContainerIsReady = false;
        /**
         * Polling interval if paypal script is pending
         */
        this.defaultPollInterval = 50;
        /**
         * Polling will stop after polling reaches this number
         */
        this.maximumPollWaitTime = 5000;
        /**
         * Name of the global variable where paypal is stored
         */
        this.paypalWindowName = 'paypal';
        /**
         * Name of the global variable indicating that script was initiated (added to page)
         */
        this.paypalWindowScriptInitiated = 'ngx-paypal-script-initiated';
        /**
         * PayPal integration script url
         */
        this.paypalScriptUrl = 'https://www.paypalobjects.com/api/checkout.js';
        this.payPalButtonContainerIdPrefix = 'ngx-paypal-button-container-';
        this.ngUnsubscribe = new Subject();
    }
    Object.defineProperty(NgxPaypalComponent.prototype, "payPalButtonContainerElem", {
        set: /**
         * @param {?} content
         * @return {?}
         */
        function (content) {
            if (content) {
                this._payPalButtonContainerElem = content;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    NgxPaypalComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        // init when config once its available
        if (this.config) {
            this.initPayPal();
        }
    };
    /**
     * @return {?}
     */
    NgxPaypalComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        // register script if element is ready in dom
        if (this.registerPayPalScriptWhenContainerIsReady && this._payPalButtonContainerElem) {
            this.setupScript();
            this.registerPayPalScriptWhenContainerIsReady = false;
        }
    };
    /**
     * @return {?}
     */
    NgxPaypalComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.ngUnsubscribe.next();
        this.ngUnsubscribe.complete();
    };
    /**
     * @return {?}
     */
    NgxPaypalComponent.prototype.initPayPal = /**
     * @return {?}
     */
    function () {
        // set unique paypal container button id
        this.payPalButtonContainerId = "" + this.payPalButtonContainerIdPrefix + this.getPseudoUniqueNumber();
        // check if paypal was already register and if so, don't add it to page again
        if (!window[this.paypalWindowName]) {
            // check if script is pending
            if (window[this.paypalWindowScriptInitiated] === true) {
                this.pollUntilScriptAvailable();
            }
            else {
                // register script and set global flag
                window[this.paypalWindowScriptInitiated] = true;
                this.addPayPalScriptToPage();
            }
        }
        else {
            // just register payment
            this.handleScriptRegistering();
        }
    };
    /**
     * @return {?}
     */
    NgxPaypalComponent.prototype.getPseudoUniqueNumber = /**
     * @return {?}
     */
    function () {
        return new Date().valueOf();
    };
    /**
     * Used when there are multiple paypal components on the same page beacuse only 1 of them
     * may register paypal script. The other has to be polling until paypal is available or component destroyed
     * @return {?}
     */
    NgxPaypalComponent.prototype.pollUntilScriptAvailable = /**
     * Used when there are multiple paypal components on the same page beacuse only 1 of them
     * may register paypal script. The other has to be polling until paypal is available or component destroyed
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var obs = interval(this.defaultPollInterval)
            .pipe(takeUntil(this.ngUnsubscribe), map(function (x) {
            if (x >= _this.maximumPollWaitTime) {
                console.warn("PayPal script was not loaded after '" + _this.maximumPollWaitTime + "' maximum polling time.");
                obs.unsubscribe();
                return;
            }
            // check if paypal script exists
            if (window[_this.paypalWindowName]) {
                // register script
                // register script
                _this.handleScriptRegistering();
                // stop execution
                obs.unsubscribe();
            }
        }))
            .subscribe();
    };
    /**
     * @return {?}
     */
    NgxPaypalComponent.prototype.addPayPalScriptToPage = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var script = document.createElement('script');
        script.innerHTML = '';
        script.src = this.paypalScriptUrl;
        script.onload = function () { return _this.handleScriptRegistering(); };
        script.async = true;
        script.defer = true;
        this.paypalScriptElem.nativeElement.appendChild(script);
    };
    /**
     * @return {?}
     */
    NgxPaypalComponent.prototype.handleScriptRegistering = /**
     * @return {?}
     */
    function () {
        // check if container with requested id exists
        // this is here because dynamically switching between components would cause PayPal to
        // throw an error if the container already existed before
        if (this._payPalButtonContainerElem && this._payPalButtonContainerElem.nativeElement &&
            this._payPalButtonContainerElem.nativeElement.id === this.payPalButtonContainerId) {
            // container is ready, setup script right away
            this.setupScript();
        }
        else {
            // container is not ready, delay registering until it is
            this.registerPayPalScriptWhenContainerIsReady = true;
        }
    };
    /**
     * @return {?}
     */
    NgxPaypalComponent.prototype.setupScript = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // first clear container
        if (!this._payPalButtonContainerElem) {
            throw Error("Cannot setup script because paypal button container with id '" + this.payPalButtonContainerId + "' is not yet ready");
        }
        this._payPalButtonContainerElem.nativeElement.innerHTML = '';
        if (!window[this.paypalWindowName]) {
            throw Error('PayPal script is not available');
        }
        // render PayPal button as per their docs at
        // https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/add-paypal-button/
        window[this.paypalWindowName].Button.render({
            // set environment
            env: this.config.environment.toString(),
            // Show the buyer a 'Pay Now' button in the checkout flow
            commit: this.config.commit,
            // init client for client side integration
            client: this.getClient(),
            // set button config if available
            style: this.config.button,
            // set funding if available
            funding: this.getFunding(),
            // payment() is called when the button is clicked
            payment: function (data, actions) {
                if (_this.config.integrationType === PayPalIntegrationType.ServerSideREST) {
                    // client needs to create payment on server side
                    if (!_this.config.payment) {
                        throw Error("You need set up a create payment method and return\n                            PayPal's payment id when using server side integration");
                    }
                    // Paypal expects promise with payment id (string) to be returned
                    return _this.config.payment().toPromise()
                        .then(function (paymentId) {
                        return paymentId;
                    });
                }
                if (_this.config.integrationType === PayPalIntegrationType.ClientSideREST) {
                    if (!_this.config.transactions || !Array.isArray(_this.config.transactions) || _this.config.transactions.length <= 0) {
                        throw Error("You need to provide at least 1 transaction for client side integration");
                    }
                    /** @type {?} */
                    var experienceConfig = _this.config.experience;
                    return actions.payment.create({
                        payment: {
                            transactions: _this.config.transactions
                        },
                        experience: {
                            input_fields: {
                                no_shipping: (experienceConfig && experienceConfig.noShipping) ? 1 : 0
                            },
                            presentation: {
                                brand_name: (experienceConfig && experienceConfig.brandName) ? experienceConfig.brandName : null,
                                logo_image: (experienceConfig && experienceConfig.logoImage) ? experienceConfig.logoImage : null,
                                locale_code: (experienceConfig && experienceConfig.localeCode) ? experienceConfig.localeCode : null
                            }
                        }
                    });
                }
            },
            // onAuthorize() is called when the buyer approves the payment
            onAuthorize: function (data, actions) {
                if (_this.config.integrationType === PayPalIntegrationType.ServerSideREST) {
                    // client needs to server to execute the payment
                    if (!_this.config.onAuthorize) {
                        throw Error("You need set up an execute method when using server side integration");
                    }
                    // Paypal expects promise
                    return _this.config.onAuthorize(data, actions).toPromise();
                }
                if (_this.config.integrationType === PayPalIntegrationType.ClientSideREST) {
                    // Make a call to the REST api to execute the payment
                    return actions.payment.execute().then(function () {
                        if (!_this.config.onPaymentComplete) {
                            throw Error("You should provide some callback when payment is finished when using client side integration");
                        }
                        _this.config.onPaymentComplete(data, actions);
                    });
                }
            },
            onError: function (err) {
                if (_this.config.onError) {
                    _this.config.onError(err);
                }
            },
            onCancel: function (data, actions) {
                if (_this.config.onCancel) {
                    _this.config.onCancel(data, actions);
                }
            },
            onClick: function () {
                if (_this.config.onClick) {
                    _this.config.onClick();
                }
            },
            validate: function (actions) {
                if (_this.config.validate) {
                    _this.config.validate(actions);
                }
            }
        }, "#" + this.payPalButtonContainerId);
    };
    /**
     * @return {?}
     */
    NgxPaypalComponent.prototype.getClient = /**
     * @return {?}
     */
    function () {
        if (this.config.integrationType === PayPalIntegrationType.ClientSideREST) {
            if (!this.config.client) {
                throw Error("You need to setup client information when using client side integration");
            }
            return {
                production: this.config.client.production,
                sandbox: this.config.client.sandbox
            };
        }
        return undefined;
    };
    /**
     * @return {?}
     */
    NgxPaypalComponent.prototype.getFunding = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // resolve funding to use paypal's properties
        if (!this.config.funding) {
            // no funding provided
            return undefined;
        }
        /** @type {?} */
        var allowed = [];
        /** @type {?} */
        var disallowed = [];
        if (this.config.funding.allowed) {
            this.config.funding.allowed.forEach(function (type) {
                allowed.push(_this.mapFundingType(type));
            });
        }
        if (this.config.funding.disallowed) {
            this.config.funding.disallowed.forEach(function (type) {
                disallowed.push(_this.mapFundingType(type));
            });
        }
        return {
            allowed: allowed,
            disallowed: disallowed
        };
    };
    /**
     * @param {?} type
     * @return {?}
     */
    NgxPaypalComponent.prototype.mapFundingType = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        if (type === PayPalFunding.Card) {
            return paypal.FUNDING.CARD;
        }
        if (type === PayPalFunding.Credit) {
            return paypal.FUNDING.CREDIT;
        }
        if (type === PayPalFunding.Elv) {
            return paypal.FUNDING.ELV;
        }
        throw Error("Unsupported funding type '" + type + "'");
    };
    NgxPaypalComponent.decorators = [
        { type: Component, args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'ngx-paypal',
                    template: "\n    <div #payPalScriptElem></div>\n    <div #payPalButtonContainerElem [id]=\"payPalButtonContainerId\"></div>\n    "
                }] }
    ];
    /** @nocollapse */
    NgxPaypalComponent.ctorParameters = function () { return []; };
    NgxPaypalComponent.propDecorators = {
        config: [{ type: Input }],
        useGlobalConfig: [{ type: Input }],
        paypalScriptElem: [{ type: ViewChild, args: ['payPalScriptElem',] }],
        payPalButtonContainerElem: [{ type: ViewChild, args: ['payPalButtonContainerElem',] }]
    };
    return NgxPaypalComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var NgxPayPalModule = /** @class */ (function () {
    function NgxPayPalModule() {
    }
    NgxPayPalModule.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                    declarations: [
                        NgxPaypalComponent,
                    ],
                    exports: [
                        NgxPaypalComponent,
                    ]
                },] }
    ];
    return NgxPayPalModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @enum {string} */
var PayPalEnvironment = {
    Sandbox: 'sandbox',
    Production: 'production',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { NgxPayPalModule, PayPalEnvironment, PayPalFunding, PayPalIntegrationType, PayPalConfig, NgxPaypalComponent, NgxPaypalComponent as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXBheXBhbC5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vbmd4LXBheXBhbC9saWIvbW9kZWxzL3BheXBhbC1mdW5kaW5nLnRzIiwibmc6Ly9uZ3gtcGF5cGFsL2xpYi9tb2RlbHMvcGF5cGFsLWludGVncmF0aW9uLnRzIiwibmc6Ly9uZ3gtcGF5cGFsL2xpYi9tb2RlbHMvcGF5cGFsLW1vZGVscy50cyIsIm5nOi8vbmd4LXBheXBhbC9saWIvY29tcG9uZW50cy9wYXlwYWwtY29tcG9uZW50LnRzIiwibmc6Ly9uZ3gtcGF5cGFsL2xpYi9uZ3gtcGF5cGFsLm1vZHVsZS50cyIsIm5nOi8vbmd4LXBheXBhbC9saWIvbW9kZWxzL3BheXBhbC1lbnZpcm9ubWVudC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZW51bSBQYXlQYWxGdW5kaW5nIHtcclxuICAgIENhcmQsXHJcbiAgICBDcmVkaXQsXHJcbiAgICBFbHZcclxufVxyXG4iLCJleHBvcnQgZW51bSBQYXlQYWxJbnRlZ3JhdGlvblR5cGUge1xyXG4gICAgQ2xpZW50U2lkZVJFU1QsXHJcbiAgICBTZXJ2ZXJTaWRlUkVTVCxcclxufVxyXG4iLCJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcblxyXG5pbXBvcnQgeyBQYXlQYWxGdW5kaW5nIH0gZnJvbSAnLi9wYXlwYWwtZnVuZGluZyc7XHJcbmltcG9ydCB7IFBheVBhbEVudmlyb25tZW50IH0gZnJvbSAnLi9wYXlwYWwtZW52aXJvbm1lbnQnO1xyXG5pbXBvcnQgeyBQYXlQYWxJbnRlZ3JhdGlvblR5cGUgfSBmcm9tICcuL3BheXBhbC1pbnRlZ3JhdGlvbic7XHJcblxyXG5leHBvcnQgY2xhc3MgUGF5UGFsQ29uZmlnIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNob3cgJ1BheSBOb3cnIGJ1dHRvbiBjb25maWdcclxuICAgICAqL1xyXG4gICAgcHVibGljIGNvbW1pdCA9IHRydWU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsZWQgdG8gY3JlYXRlIG5ldyBwYXltZW50IGZvciBzZXJ2ZXIgc2lkZSBpbnRlZ3JhdGlvblxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcGF5bWVudD86ICgpID0+IE9ic2VydmFibGU8c3RyaW5nPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENhbGxlZCB0byBleGVjdXRlIHBheW1lbnQgZm9yIHNlcnZlciBzaWRlIGludGVncmF0aW9uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvbkF1dGhvcml6ZT86IChkYXRhOiBJUGF5UGFsUGF5bWVudENvbXBsZXRlRGF0YSwgYWN0aW9uczogYW55KSA9PiBPYnNlcnZhYmxlPHZvaWQ+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2xpZW50IHRva2VucyBmb3IgY2xpZW50IHNpZGUgaW50ZWdyYXRpb25cclxuICAgICAqL1xyXG4gICAgcHVibGljIGNsaWVudD86IElQYXlwYWxDbGllbnQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBcnJheSBvZiB0cmFuc2FjdGlvbiwgcmVxdWlyZWQgZm9yIGNsaWVudCBzaWRlIGludGVncmF0aW9uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyB0cmFuc2FjdGlvbnM/OiBJUGF5UGFsVHJhbnNhY3Rpb25bXTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFBheW1lbnQgRXhwZXJpZW5jZSBjb25maWd1cmF0aW9uc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZXhwZXJpZW5jZT86IElQYXlQYWxFeHBlcmllbmNlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2FsbGVkIGZvciBjbGllbnQgc2lkZSBpbnRlZ3JhdGlvbiB3aGVuIHBheW1lbnQgaXMgZXhlY3V0ZWRcclxuICAgICAqL1xyXG4gICAgcHVibGljIG9uUGF5bWVudENvbXBsZXRlPzogKGRhdGE6IElQYXlQYWxQYXltZW50Q29tcGxldGVEYXRhLCBhY3Rpb25zOiBhbnkpID0+IHZvaWQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBCdXR0b24gY29uZmlndXJhdGlvblxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYnV0dG9uPzogSVBheVBhbEJ1dHRvblN0eWxlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGF5cGFsIGZ1bmRpbmcgY29uZmlndXJhdGlvblxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZnVuZGluZz86IElQYXlQYWxGdW5kaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2FsbGVkIHdoZW4gUGF5UGFsIGV4cGVyaWVuY2VzIGFuIGVycm9yXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvbkVycm9yPzogKGVycjogYW55KSA9PiB2b2lkO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBoYW5kbGVyIHdpbGwgYmUgY2FsbGVkIGZvciBldmVyeSBjbGljayBvbiB0aGUgUGF5UGFsIGJ1dHRvblxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb25DbGljaz86ICgpID0+IHZvaWQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsZWQgd2hlbiB1c2VyIGNhbmNlbHMgcGF5bWVudFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb25DYW5jZWw/OiAoZGF0YTogSVBheVBhbENhbmNlbFBheW1lbnQsIGFjdGlvbnM6IGFueSkgPT4gdm9pZDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENhbiBiZSB1c2VkIHRvIHZhbGlkYXRpb24gYXMgY2FuIGJlIHNlZW4gaGVyZTogaHR0cHM6Ly9kZXZlbG9wZXIucGF5cGFsLmNvbS9kZW1vL2NoZWNrb3V0LyMvcGF0dGVybi92YWxpZGF0aW9uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyB2YWxpZGF0ZT86IChhY3Rpb25zOiBhbnkpID0+IHZvaWQ7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVHlwZSBvZiB0aGUgaW50ZWdyYXRpb25cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgaW50ZWdyYXRpb25UeXBlOiBQYXlQYWxJbnRlZ3JhdGlvblR5cGUsXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRW52aXJvbm1lbnRcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZW52aXJvbm1lbnQ6IFBheVBhbEVudmlyb25tZW50LFxyXG4gICAgICAgIGNvbmZpZzoge1xyXG4gICAgICAgICAgICBvbkVycm9yPzogKGVycjogYW55KSA9PiB2b2lkLFxyXG4gICAgICAgICAgICBvbkNsaWNrPzogKCkgPT4gdm9pZCxcclxuICAgICAgICAgICAgdmFsaWRhdGU/OiAoYWN0aW9uczogYW55KSA9PiB2b2lkO1xyXG4gICAgICAgICAgICBvbkNhbmNlbD86IChkYXRhOiBJUGF5UGFsQ2FuY2VsUGF5bWVudCwgYWN0aW9uczogYW55KSA9PiB2b2lkLFxyXG4gICAgICAgICAgICBwYXltZW50PzogKCkgPT4gT2JzZXJ2YWJsZTxzdHJpbmc+LFxyXG4gICAgICAgICAgICBvbkF1dGhvcml6ZT86IChkYXRhOiBJUGF5UGFsUGF5bWVudENvbXBsZXRlRGF0YSwgYWN0aW9uczogYW55KSA9PiBPYnNlcnZhYmxlPHZvaWQ+LFxyXG4gICAgICAgICAgICBjbGllbnQ/OiBJUGF5cGFsQ2xpZW50LFxyXG4gICAgICAgICAgICBvblBheW1lbnRDb21wbGV0ZT86IChkYXRhOiBJUGF5UGFsUGF5bWVudENvbXBsZXRlRGF0YSwgYWN0aW9uczogYW55KSA9PiB2b2lkLFxyXG4gICAgICAgICAgICB0cmFuc2FjdGlvbnM/OiBJUGF5UGFsVHJhbnNhY3Rpb25bXSxcclxuICAgICAgICAgICAgbm90ZV90b19wYXllcj86IHN0cmluZztcclxuICAgICAgICAgICAgZXhwZXJpZW5jZT86IElQYXlQYWxFeHBlcmllbmNlLFxyXG4gICAgICAgICAgICBjb21taXQ/OiBib29sZWFuLFxyXG4gICAgICAgICAgICBidXR0b24/OiBJUGF5UGFsQnV0dG9uU3R5bGUsXHJcbiAgICAgICAgICAgIGZ1bmRpbmc/OiBJUGF5UGFsRnVuZGluZ1xyXG4gICAgICAgIH0pIHtcclxuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIGNvbmZpZyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVBheVBhbFBheW1lbnRDb21wbGV0ZURhdGEge1xyXG4gICAgaW50ZW50OiBzdHJpbmc7XHJcbiAgICBvcmRlcklEOiBzdHJpbmc7XHJcbiAgICBwYXllcklEOiBzdHJpbmc7XHJcbiAgICBwYXltZW50SUQ6IHN0cmluZztcclxuICAgIHBheW1lbnRUb2tlbjogc3RyaW5nO1xyXG4gICAgcmV0dXJuVXJsOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVBheVBhbENhbmNlbFBheW1lbnQge1xyXG4gICAgZGF0YTogSVBheVBhbENhbmNlbFBheW1lbnREYXRhO1xyXG4gICAgYWN0aW9uczogYW55O1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElQYXlQYWxDYW5jZWxQYXltZW50RGF0YSB7XHJcbiAgICBiaWxsaW5nSUQ6IHN0cmluZztcclxuICAgIGNhbmNlbFVybDogc3RyaW5nO1xyXG4gICAgaW50ZW50OiBzdHJpbmc7XHJcbiAgICBwYXltZW50SUQ6IHN0cmluZztcclxuICAgIHBheW1lbnRUb2tlbjogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElQYXlwYWxDbGllbnQge1xyXG4gICAgc2FuZGJveD86IHN0cmluZztcclxuICAgIHByb2R1Y3Rpb24/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVBheVBhbFRyYW5zYWN0aW9uIHtcclxuICAgIGFtb3VudDogSVBheVBhbEFtb3VudDtcclxuICAgIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xyXG4gICAgY3VzdG9tPzogc3RyaW5nO1xyXG4gICAgcGF5bWVudF9vcHRpb25zPzogSVBheVBhbFRyYW5zYWN0aW9uUGF5bWVudE9wdGlvbnM7XHJcbiAgICBzb2Z0X2Rlc2NyaXB0b3I/OiBzdHJpbmc7XHJcbiAgICBpdGVtX2xpc3Q/OiBJUGF5UGFsVHJhbnNhY3Rpb25JdGVtTGlzdDtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJUGF5UGFsVHJhbnNhY3Rpb25JdGVtTGlzdCB7XHJcbiAgICBpdGVtcz86IElQYXlQYWxUcmFuc2FjdGlvbkl0ZW1bXTtcclxuICAgIHNoaXBwaW5nX2FkZHJlc3M/OiBJUGF5UGFsVHJhbnNhY3Rpb25TaGlwcGluZ0FkZHJlc3M7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVBheVBhbFRyYW5zYWN0aW9uSXRlbSB7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBjdXJyZW5jeTogc3RyaW5nO1xyXG4gICAgcHJpY2U6IG51bWJlcjtcclxuICAgIHF1YW50aXR5OiBudW1iZXI7XHJcblxyXG4gICAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XHJcbiAgICB0YXg/OiBudW1iZXI7XHJcbiAgICBza3U/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVBheVBhbEFtb3VudCB7XHJcbiAgICB0b3RhbDogbnVtYmVyO1xyXG4gICAgY3VycmVuY3k6IHN0cmluZztcclxuICAgIGRldGFpbHM/OiBJUGF5UGFsQW1vdW50RGV0YWlscztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJUGF5UGFsVHJhbnNhY3Rpb25TaGlwcGluZ0FkZHJlc3Mge1xyXG4gICAgcmVjaXBpZW50X25hbWU6IHN0cmluZztcclxuICAgIGxpbmUxOiBzdHJpbmc7XHJcbiAgICBsaW5lMj86IHN0cmluZztcclxuICAgIGNpdHk6IHN0cmluZztcclxuICAgIGNvdW50cnlfY29kZTogc3RyaW5nO1xyXG4gICAgcG9zdGFsX2NvZGU6IHN0cmluZztcclxuICAgIHBob25lOiBzdHJpbmc7XHJcbiAgICBzdGF0ZTogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElQYXlQYWxBbW91bnREZXRhaWxzIHtcclxuICAgIHN1YnRvdGFsOiBudW1iZXI7XHJcbiAgICB0YXg6IG51bWJlcjtcclxuICAgIHNoaXBwaW5nOiBudW1iZXI7XHJcbiAgICBoYW5kbGluZ19mZWU6IG51bWJlcjtcclxuICAgIHNoaXBwaW5nX2Rpc2NvdW50OiBudW1iZXI7XHJcbiAgICBpbnN1cmFuY2U6IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJUGF5UGFsVHJhbnNhY3Rpb25QYXltZW50T3B0aW9ucyB7XHJcbiAgICBhbGxvd2VkX3BheW1lbnRfbWV0aG9kPzogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElQYXlQYWxFeHBlcmllbmNlIHtcclxuICAgIC8qKiBJbmRpY2F0ZXMgd2hldGhlciBQYXlQYWwgZGlzcGxheXMgc2hpcHBpbmcgYWRkcmVzcyBmaWVsZHMgb24gdGhlIGV4cGVyaWVuY2UgcGFnZXMgKi9cclxuICAgIG5vU2hpcHBpbmc/OiBib29sZWFuO1xyXG4gICAgLyoqIEEgbGFiZWwgdGhhdCBvdmVycmlkZXMgdGhlIGJ1c2luZXNzIG5hbWUgaW4gdGhlIFBheVBhbCBhY2NvdW50IG9uIHRoZSBQYXlQYWwgcGFnZXMuIE1heCBsZW5ndGg6IDEyNyBjaGFyYWN0ZXJzLiAqL1xyXG4gICAgYnJhbmROYW1lPzogc3RyaW5nO1xyXG4gICAgLyoqIFVSTCB0byB0aGUgbG9nbyBpbWFnZSAoZ2lmLCBqcGcsIG9yIHBuZykuIFRoZSBpbWFnZSdzIG1heGltdW0gd2lkdGggaXMgMTkwIHBpeGVscyBhbmQgbWF4aW11bSBoZWlnaHQgaXMgNjAgcGl4ZWxzLiAqL1xyXG4gICAgbG9nb0ltYWdlPzogc3RyaW5nO1xyXG4gICAgLyoqIExvY2FsZSBpbiB3aGljaCB0byBkaXNwbGF5IFBheVBhbCBwYWdlICovXHJcbiAgICBsb2NhbGVDb2RlPzogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElQYXlQYWxCdXR0b25TdHlsZSB7XHJcbiAgICBsYWJlbD86ICdjaGVja291dCcgfCAncGF5JyB8ICdidXlub3cnIHwgJ3BheXBhbCc7XHJcbiAgICBzaXplPzogJ3NtYWxsJyB8ICdtZWRpdW0nIHwgJ2xhcmdlJyB8ICdyZXNwb25zaXZlJztcclxuICAgIHNoYXBlPzogJ3BpbGwnIHwgJ3JlY3QnO1xyXG4gICAgY29sb3I/OiAnZ29sZCcgfCAnYmx1ZScgfCAnc2lsdmVyJyB8ICdibGFjayc7XHJcbiAgICBsYXlvdXQ/OiAnaG9yaXpvbnRhbCcgfCAndmVydGljYWwnO1xyXG4gICAgdGFnbGluZT86IGZhbHNlO1xyXG4gICAgZnVuZGluZ2ljb25zPzogYm9vbGVhbjtcclxuICAgIGJyYW5kaW5nPzogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJUGF5UGFsRnVuZGluZyB7XHJcbiAgICBhbGxvd2VkOiBQYXlQYWxGdW5kaW5nW107XHJcbiAgICBkaXNhbGxvd2VkOiBQYXlQYWxGdW5kaW5nW107XHJcbn1cclxuXHJcbiIsImltcG9ydCB7XHJcbiAgICBBZnRlclZpZXdJbml0LFxyXG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXHJcbiAgICBDb21wb25lbnQsXHJcbiAgICBFbGVtZW50UmVmLFxyXG4gICAgSW5wdXQsXHJcbiAgICBPbkNoYW5nZXMsXHJcbiAgICBPbkRlc3Ryb3ksXHJcbiAgICBTaW1wbGVDaGFuZ2VzLFxyXG4gICAgVmlld0NoaWxkLFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBpbnRlcnZhbCwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBtYXAsIHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbmltcG9ydCB7IFBheVBhbEZ1bmRpbmcgfSBmcm9tICcuLi9tb2RlbHMvcGF5cGFsLWZ1bmRpbmcnO1xyXG5pbXBvcnQgeyBQYXlQYWxJbnRlZ3JhdGlvblR5cGUgfSBmcm9tICcuLi9tb2RlbHMvcGF5cGFsLWludGVncmF0aW9uJztcclxuaW1wb3J0IHsgSVBheXBhbENsaWVudCwgSVBheVBhbFBheW1lbnRDb21wbGV0ZURhdGEsIFBheVBhbENvbmZpZyB9IGZyb20gJy4uL21vZGVscy9wYXlwYWwtbW9kZWxzJztcclxuXHJcbi8qKlxyXG4gKiBHbG9iYWwgdmFyaWFibGUgd2hlcmUgUGF5UGFsIGlzIGxvYWRlZCB0b1xyXG4gKi9cclxuZGVjbGFyZSB2YXIgcGF5cGFsOiBhbnk7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG4gICAgc2VsZWN0b3I6ICduZ3gtcGF5cGFsJyxcclxuICAgIHRlbXBsYXRlOiBgXHJcbiAgICA8ZGl2ICNwYXlQYWxTY3JpcHRFbGVtPjwvZGl2PlxyXG4gICAgPGRpdiAjcGF5UGFsQnV0dG9uQ29udGFpbmVyRWxlbSBbaWRdPVwicGF5UGFsQnV0dG9uQ29udGFpbmVySWRcIj48L2Rpdj5cclxuICAgIGBcclxufSlcclxuZXhwb3J0IGNsYXNzIE5neFBheXBhbENvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbmZpZ3VyYXRpb24gZm9yIHBheXBhbC5cclxuICAgICAqL1xyXG4gICAgQElucHV0KCkgY29uZmlnOiBQYXlQYWxDb25maWc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJbmRpY2F0ZXMgaWYgZ2xvYmFsIGNvbmZpZ3VyYXRpb24gKHByb3ZpZGVkIHZpYSAnZm9yUm9vdCcpIGlzIHVzZWRcclxuICAgICAqL1xyXG4gICAgQElucHV0KCkgdXNlR2xvYmFsQ29uZmlnID0gZmFsc2U7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb250YWluZXIgZm9yIHBheXBhbCBzY3JpcHRcclxuICAgICAqL1xyXG4gICAgQFZpZXdDaGlsZCgncGF5UGFsU2NyaXB0RWxlbScpIHBheXBhbFNjcmlwdEVsZW06IEVsZW1lbnRSZWY7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVc2VkIGZvciBpbmRpY2F0aW5nIGRlbGF5ZWQgcmVuZGVyZWQgaWYgY29udGFpbmVyIGlzIG5vdCB5ZXQgcmVhZHkgaW4gRE9NXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgcmVnaXN0ZXJQYXlQYWxTY3JpcHRXaGVuQ29udGFpbmVySXNSZWFkeSA9IGZhbHNlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSG9sZHMgY3VycmVudCBjb250YWluZXIgZWxlbWVudFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIF9wYXlQYWxCdXR0b25Db250YWluZXJFbGVtPzogRWxlbWVudFJlZjtcclxuICAgIEBWaWV3Q2hpbGQoJ3BheVBhbEJ1dHRvbkNvbnRhaW5lckVsZW0nKSBzZXQgcGF5UGFsQnV0dG9uQ29udGFpbmVyRWxlbShjb250ZW50OiBFbGVtZW50UmVmKSB7XHJcbiAgICAgICAgaWYgKGNvbnRlbnQpIHtcclxuICAgICAgICAgICAgdGhpcy5fcGF5UGFsQnV0dG9uQ29udGFpbmVyRWxlbSA9IGNvbnRlbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUG9sbGluZyBpbnRlcnZhbCBpZiBwYXlwYWwgc2NyaXB0IGlzIHBlbmRpbmdcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBkZWZhdWx0UG9sbEludGVydmFsID0gNTA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQb2xsaW5nIHdpbGwgc3RvcCBhZnRlciBwb2xsaW5nIHJlYWNoZXMgdGhpcyBudW1iZXJcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBtYXhpbXVtUG9sbFdhaXRUaW1lID0gNTAwMDtcclxuXHJcbiAgICAvKipcclxuICAgICogTmFtZSBvZiB0aGUgZ2xvYmFsIHZhcmlhYmxlIHdoZXJlIHBheXBhbCBpcyBzdG9yZWRcclxuICAgICovXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHBheXBhbFdpbmRvd05hbWUgPSAncGF5cGFsJztcclxuXHJcbiAgICAvKipcclxuICAgICAqIE5hbWUgb2YgdGhlIGdsb2JhbCB2YXJpYWJsZSBpbmRpY2F0aW5nIHRoYXQgc2NyaXB0IHdhcyBpbml0aWF0ZWQgKGFkZGVkIHRvIHBhZ2UpXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgcGF5cGFsV2luZG93U2NyaXB0SW5pdGlhdGVkID0gJ25neC1wYXlwYWwtc2NyaXB0LWluaXRpYXRlZCc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQYXlQYWwgaW50ZWdyYXRpb24gc2NyaXB0IHVybFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHBheXBhbFNjcmlwdFVybCA9ICdodHRwczovL3d3dy5wYXlwYWxvYmplY3RzLmNvbS9hcGkvY2hlY2tvdXQuanMnO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSWQgb2YgdGhlIGVsZW1lbnQgd2hlcmUgUGF5UGFsIGJ1dHRvbiB3aWxsIGJlIHJlbmRlcmVkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBwYXlQYWxCdXR0b25Db250YWluZXJJZD86IHN0cmluZztcclxuXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHBheVBhbEJ1dHRvbkNvbnRhaW5lcklkUHJlZml4ID0gJ25neC1wYXlwYWwtYnV0dG9uLWNvbnRhaW5lci0nO1xyXG5cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgbmdVbnN1YnNjcmliZTogU3ViamVjdDx2b2lkPiA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICApIHtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XHJcbiAgICAgICAgLy8gaW5pdCB3aGVuIGNvbmZpZyBvbmNlIGl0cyBhdmFpbGFibGVcclxuICAgICAgICBpZiAodGhpcy5jb25maWcpIHtcclxuICAgICAgICAgICAgdGhpcy5pbml0UGF5UGFsKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcclxuICAgICAgICAvLyByZWdpc3RlciBzY3JpcHQgaWYgZWxlbWVudCBpcyByZWFkeSBpbiBkb21cclxuICAgICAgICBpZiAodGhpcy5yZWdpc3RlclBheVBhbFNjcmlwdFdoZW5Db250YWluZXJJc1JlYWR5ICYmIHRoaXMuX3BheVBhbEJ1dHRvbkNvbnRhaW5lckVsZW0pIHtcclxuICAgICAgICAgICAgdGhpcy5zZXR1cFNjcmlwdCgpO1xyXG4gICAgICAgICAgICB0aGlzLnJlZ2lzdGVyUGF5UGFsU2NyaXB0V2hlbkNvbnRhaW5lcklzUmVhZHkgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5uZ1Vuc3Vic2NyaWJlLm5leHQoKTtcclxuICAgICAgICB0aGlzLm5nVW5zdWJzY3JpYmUuY29tcGxldGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGluaXRQYXlQYWwoKTogdm9pZCB7XHJcbiAgICAgICAgLy8gc2V0IHVuaXF1ZSBwYXlwYWwgY29udGFpbmVyIGJ1dHRvbiBpZFxyXG4gICAgICAgIHRoaXMucGF5UGFsQnV0dG9uQ29udGFpbmVySWQgPSBgJHt0aGlzLnBheVBhbEJ1dHRvbkNvbnRhaW5lcklkUHJlZml4fSR7dGhpcy5nZXRQc2V1ZG9VbmlxdWVOdW1iZXIoKX1gO1xyXG4gICAgICAgIC8vIGNoZWNrIGlmIHBheXBhbCB3YXMgYWxyZWFkeSByZWdpc3RlciBhbmQgaWYgc28sIGRvbid0IGFkZCBpdCB0byBwYWdlIGFnYWluXHJcbiAgICAgICAgaWYgKCF3aW5kb3dbdGhpcy5wYXlwYWxXaW5kb3dOYW1lXSkge1xyXG4gICAgICAgICAgICAvLyBjaGVjayBpZiBzY3JpcHQgaXMgcGVuZGluZ1xyXG4gICAgICAgICAgICBpZiAod2luZG93W3RoaXMucGF5cGFsV2luZG93U2NyaXB0SW5pdGlhdGVkXSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wb2xsVW50aWxTY3JpcHRBdmFpbGFibGUoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIHJlZ2lzdGVyIHNjcmlwdCBhbmQgc2V0IGdsb2JhbCBmbGFnXHJcbiAgICAgICAgICAgICAgICB3aW5kb3dbdGhpcy5wYXlwYWxXaW5kb3dTY3JpcHRJbml0aWF0ZWRdID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWRkUGF5UGFsU2NyaXB0VG9QYWdlKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8ganVzdCByZWdpc3RlciBwYXltZW50XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlU2NyaXB0UmVnaXN0ZXJpbmcoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXRQc2V1ZG9VbmlxdWVOdW1iZXIoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gbmV3IERhdGUoKS52YWx1ZU9mKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVc2VkIHdoZW4gdGhlcmUgYXJlIG11bHRpcGxlIHBheXBhbCBjb21wb25lbnRzIG9uIHRoZSBzYW1lIHBhZ2UgYmVhY3VzZSBvbmx5IDEgb2YgdGhlbVxyXG4gICAgICogbWF5IHJlZ2lzdGVyIHBheXBhbCBzY3JpcHQuIFRoZSBvdGhlciBoYXMgdG8gYmUgcG9sbGluZyB1bnRpbCBwYXlwYWwgaXMgYXZhaWxhYmxlIG9yIGNvbXBvbmVudCBkZXN0cm95ZWRcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBwb2xsVW50aWxTY3JpcHRBdmFpbGFibGUoKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3Qgb2JzID0gaW50ZXJ2YWwodGhpcy5kZWZhdWx0UG9sbEludGVydmFsKVxyXG4gICAgICAgICAgICAucGlwZShcclxuICAgICAgICAgICAgICAgIHRha2VVbnRpbCh0aGlzLm5nVW5zdWJzY3JpYmUpLFxyXG4gICAgICAgICAgICAgICAgbWFwKCh4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHggPj0gdGhpcy5tYXhpbXVtUG9sbFdhaXRUaW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgUGF5UGFsIHNjcmlwdCB3YXMgbm90IGxvYWRlZCBhZnRlciAnJHt0aGlzLm1heGltdW1Qb2xsV2FpdFRpbWV9JyBtYXhpbXVtIHBvbGxpbmcgdGltZS5gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JzLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHBheXBhbCBzY3JpcHQgZXhpc3RzXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdpbmRvd1t0aGlzLnBheXBhbFdpbmRvd05hbWVdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlZ2lzdGVyIHNjcmlwdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZVNjcmlwdFJlZ2lzdGVyaW5nKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzdG9wIGV4ZWN1dGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYnMudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFkZFBheVBhbFNjcmlwdFRvUGFnZSgpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcclxuICAgICAgICBzY3JpcHQuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgc2NyaXB0LnNyYyA9IHRoaXMucGF5cGFsU2NyaXB0VXJsO1xyXG4gICAgICAgIHNjcmlwdC5vbmxvYWQgPSAoKSA9PiB0aGlzLmhhbmRsZVNjcmlwdFJlZ2lzdGVyaW5nKCk7XHJcbiAgICAgICAgc2NyaXB0LmFzeW5jID0gdHJ1ZTtcclxuICAgICAgICBzY3JpcHQuZGVmZXIgPSB0cnVlO1xyXG5cclxuICAgICAgICB0aGlzLnBheXBhbFNjcmlwdEVsZW0ubmF0aXZlRWxlbWVudC5hcHBlbmRDaGlsZChzY3JpcHQpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaGFuZGxlU2NyaXB0UmVnaXN0ZXJpbmcoKTogdm9pZCB7XHJcbiAgICAgICAgLy8gY2hlY2sgaWYgY29udGFpbmVyIHdpdGggcmVxdWVzdGVkIGlkIGV4aXN0c1xyXG4gICAgICAgIC8vIHRoaXMgaXMgaGVyZSBiZWNhdXNlIGR5bmFtaWNhbGx5IHN3aXRjaGluZyBiZXR3ZWVuIGNvbXBvbmVudHMgd291bGQgY2F1c2UgUGF5UGFsIHRvXHJcbiAgICAgICAgLy8gdGhyb3cgYW4gZXJyb3IgaWYgdGhlIGNvbnRhaW5lciBhbHJlYWR5IGV4aXN0ZWQgYmVmb3JlXHJcbiAgICAgICAgaWYgKHRoaXMuX3BheVBhbEJ1dHRvbkNvbnRhaW5lckVsZW0gJiYgdGhpcy5fcGF5UGFsQnV0dG9uQ29udGFpbmVyRWxlbS5uYXRpdmVFbGVtZW50ICYmXHJcbiAgICAgICAgICAgIHRoaXMuX3BheVBhbEJ1dHRvbkNvbnRhaW5lckVsZW0ubmF0aXZlRWxlbWVudC5pZCA9PT0gdGhpcy5wYXlQYWxCdXR0b25Db250YWluZXJJZCkge1xyXG4gICAgICAgICAgICAvLyBjb250YWluZXIgaXMgcmVhZHksIHNldHVwIHNjcmlwdCByaWdodCBhd2F5XHJcbiAgICAgICAgICAgIHRoaXMuc2V0dXBTY3JpcHQoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBjb250YWluZXIgaXMgbm90IHJlYWR5LCBkZWxheSByZWdpc3RlcmluZyB1bnRpbCBpdCBpc1xyXG4gICAgICAgICAgICB0aGlzLnJlZ2lzdGVyUGF5UGFsU2NyaXB0V2hlbkNvbnRhaW5lcklzUmVhZHkgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNldHVwU2NyaXB0KCk6IHZvaWQge1xyXG4gICAgICAgIC8vIGZpcnN0IGNsZWFyIGNvbnRhaW5lclxyXG4gICAgICAgIGlmICghdGhpcy5fcGF5UGFsQnV0dG9uQ29udGFpbmVyRWxlbSkge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihgQ2Fubm90IHNldHVwIHNjcmlwdCBiZWNhdXNlIHBheXBhbCBidXR0b24gY29udGFpbmVyIHdpdGggaWQgJyR7dGhpcy5wYXlQYWxCdXR0b25Db250YWluZXJJZH0nIGlzIG5vdCB5ZXQgcmVhZHlgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3BheVBhbEJ1dHRvbkNvbnRhaW5lckVsZW0ubmF0aXZlRWxlbWVudC5pbm5lckhUTUwgPSAnJztcclxuXHJcbiAgICAgICAgaWYgKCF3aW5kb3dbdGhpcy5wYXlwYWxXaW5kb3dOYW1lXSkge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignUGF5UGFsIHNjcmlwdCBpcyBub3QgYXZhaWxhYmxlJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyByZW5kZXIgUGF5UGFsIGJ1dHRvbiBhcyBwZXIgdGhlaXIgZG9jcyBhdFxyXG4gICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLnBheXBhbC5jb20vZG9jcy9pbnRlZ3JhdGlvbi9kaXJlY3QvZXhwcmVzcy1jaGVja291dC9pbnRlZ3JhdGlvbi1qc3Y0L2FkZC1wYXlwYWwtYnV0dG9uL1xyXG4gICAgICAgIHdpbmRvd1t0aGlzLnBheXBhbFdpbmRvd05hbWVdLkJ1dHRvbi5yZW5kZXIoe1xyXG4gICAgICAgICAgICAvLyBzZXQgZW52aXJvbm1lbnRcclxuICAgICAgICAgICAgZW52OiB0aGlzLmNvbmZpZy5lbnZpcm9ubWVudC50b1N0cmluZygpLFxyXG5cclxuICAgICAgICAgICAgLy8gU2hvdyB0aGUgYnV5ZXIgYSAnUGF5IE5vdycgYnV0dG9uIGluIHRoZSBjaGVja291dCBmbG93XHJcbiAgICAgICAgICAgIGNvbW1pdDogdGhpcy5jb25maWcuY29tbWl0LFxyXG5cclxuICAgICAgICAgICAgLy8gaW5pdCBjbGllbnQgZm9yIGNsaWVudCBzaWRlIGludGVncmF0aW9uXHJcbiAgICAgICAgICAgIGNsaWVudDogdGhpcy5nZXRDbGllbnQoKSxcclxuXHJcbiAgICAgICAgICAgIC8vIHNldCBidXR0b24gY29uZmlnIGlmIGF2YWlsYWJsZVxyXG4gICAgICAgICAgICBzdHlsZTogdGhpcy5jb25maWcuYnV0dG9uLFxyXG5cclxuICAgICAgICAgICAgLy8gc2V0IGZ1bmRpbmcgaWYgYXZhaWxhYmxlXHJcbiAgICAgICAgICAgIGZ1bmRpbmc6IHRoaXMuZ2V0RnVuZGluZygpLFxyXG5cclxuICAgICAgICAgICAgLy8gcGF5bWVudCgpIGlzIGNhbGxlZCB3aGVuIHRoZSBidXR0b24gaXMgY2xpY2tlZFxyXG4gICAgICAgICAgICBwYXltZW50OiAoZGF0YSwgYWN0aW9ucykgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY29uZmlnLmludGVncmF0aW9uVHlwZSA9PT0gUGF5UGFsSW50ZWdyYXRpb25UeXBlLlNlcnZlclNpZGVSRVNUKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY2xpZW50IG5lZWRzIHRvIGNyZWF0ZSBwYXltZW50IG9uIHNlcnZlciBzaWRlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNvbmZpZy5wYXltZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKGBZb3UgbmVlZCBzZXQgdXAgYSBjcmVhdGUgcGF5bWVudCBtZXRob2QgYW5kIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUGF5UGFsJ3MgcGF5bWVudCBpZCB3aGVuIHVzaW5nIHNlcnZlciBzaWRlIGludGVncmF0aW9uYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBQYXlwYWwgZXhwZWN0cyBwcm9taXNlIHdpdGggcGF5bWVudCBpZCAoc3RyaW5nKSB0byBiZSByZXR1cm5lZFxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmZpZy5wYXltZW50KCkudG9Qcm9taXNlKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4ocGF5bWVudElkID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXltZW50SWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbmZpZy5pbnRlZ3JhdGlvblR5cGUgPT09IFBheVBhbEludGVncmF0aW9uVHlwZS5DbGllbnRTaWRlUkVTVCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5jb25maWcudHJhbnNhY3Rpb25zIHx8ICFBcnJheS5pc0FycmF5KHRoaXMuY29uZmlnLnRyYW5zYWN0aW9ucykgfHwgdGhpcy5jb25maWcudHJhbnNhY3Rpb25zLmxlbmd0aCA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKGBZb3UgbmVlZCB0byBwcm92aWRlIGF0IGxlYXN0IDEgdHJhbnNhY3Rpb24gZm9yIGNsaWVudCBzaWRlIGludGVncmF0aW9uYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBleHBlcmllbmNlQ29uZmlnID0gdGhpcy5jb25maWcuZXhwZXJpZW5jZTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWN0aW9ucy5wYXltZW50LmNyZWF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBheW1lbnQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uczogdGhpcy5jb25maWcudHJhbnNhY3Rpb25zXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVyaWVuY2U6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0X2ZpZWxkczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vX3NoaXBwaW5nOiAoZXhwZXJpZW5jZUNvbmZpZyAmJiBleHBlcmllbmNlQ29uZmlnLm5vU2hpcHBpbmcpID8gMSA6IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVzZW50YXRpb246IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmFuZF9uYW1lOiAoZXhwZXJpZW5jZUNvbmZpZyAmJiBleHBlcmllbmNlQ29uZmlnLmJyYW5kTmFtZSkgPyBleHBlcmllbmNlQ29uZmlnLmJyYW5kTmFtZSA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nb19pbWFnZTogKGV4cGVyaWVuY2VDb25maWcgJiYgZXhwZXJpZW5jZUNvbmZpZy5sb2dvSW1hZ2UpID8gZXhwZXJpZW5jZUNvbmZpZy5sb2dvSW1hZ2UgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsZV9jb2RlOiAoZXhwZXJpZW5jZUNvbmZpZyAmJiBleHBlcmllbmNlQ29uZmlnLmxvY2FsZUNvZGUpID8gZXhwZXJpZW5jZUNvbmZpZy5sb2NhbGVDb2RlIDogbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAvLyBvbkF1dGhvcml6ZSgpIGlzIGNhbGxlZCB3aGVuIHRoZSBidXllciBhcHByb3ZlcyB0aGUgcGF5bWVudFxyXG4gICAgICAgICAgICBvbkF1dGhvcml6ZTogKGRhdGE6IElQYXlQYWxQYXltZW50Q29tcGxldGVEYXRhLCBhY3Rpb25zOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbmZpZy5pbnRlZ3JhdGlvblR5cGUgPT09IFBheVBhbEludGVncmF0aW9uVHlwZS5TZXJ2ZXJTaWRlUkVTVCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNsaWVudCBuZWVkcyB0byBzZXJ2ZXIgdG8gZXhlY3V0ZSB0aGUgcGF5bWVudFxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5jb25maWcub25BdXRob3JpemUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoYFlvdSBuZWVkIHNldCB1cCBhbiBleGVjdXRlIG1ldGhvZCB3aGVuIHVzaW5nIHNlcnZlciBzaWRlIGludGVncmF0aW9uYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBQYXlwYWwgZXhwZWN0cyBwcm9taXNlXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLm9uQXV0aG9yaXplKGRhdGEsIGFjdGlvbnMpLnRvUHJvbWlzZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbmZpZy5pbnRlZ3JhdGlvblR5cGUgPT09IFBheVBhbEludGVncmF0aW9uVHlwZS5DbGllbnRTaWRlUkVTVCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIE1ha2UgYSBjYWxsIHRvIHRoZSBSRVNUIGFwaSB0byBleGVjdXRlIHRoZSBwYXltZW50XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFjdGlvbnMucGF5bWVudC5leGVjdXRlKCkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5jb25maWcub25QYXltZW50Q29tcGxldGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKGBZb3Ugc2hvdWxkIHByb3ZpZGUgc29tZSBjYWxsYmFjayB3aGVuIHBheW1lbnQgaXMgZmluaXNoZWQgd2hlbiB1c2luZyBjbGllbnQgc2lkZSBpbnRlZ3JhdGlvbmApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnLm9uUGF5bWVudENvbXBsZXRlKGRhdGEsIGFjdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgb25FcnJvcjogKGVycikgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY29uZmlnLm9uRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZy5vbkVycm9yKGVycik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICBvbkNhbmNlbDogKGRhdGEsIGFjdGlvbnMpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbmZpZy5vbkNhbmNlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnLm9uQ2FuY2VsKGRhdGEsIGFjdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvbkNsaWNrOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jb25maWcub25DbGljaykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnLm9uQ2xpY2soKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdmFsaWRhdGU6IChhY3Rpb25zKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jb25maWcudmFsaWRhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZy52YWxpZGF0ZShhY3Rpb25zKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIGAjJHt0aGlzLnBheVBhbEJ1dHRvbkNvbnRhaW5lcklkfWApO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0Q2xpZW50KCk6IElQYXlwYWxDbGllbnQgfCB1bmRlZmluZWQge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5pbnRlZ3JhdGlvblR5cGUgPT09IFBheVBhbEludGVncmF0aW9uVHlwZS5DbGllbnRTaWRlUkVTVCkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuY29uZmlnLmNsaWVudCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoYFlvdSBuZWVkIHRvIHNldHVwIGNsaWVudCBpbmZvcm1hdGlvbiB3aGVuIHVzaW5nIGNsaWVudCBzaWRlIGludGVncmF0aW9uYCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBwcm9kdWN0aW9uOiB0aGlzLmNvbmZpZy5jbGllbnQucHJvZHVjdGlvbixcclxuICAgICAgICAgICAgICAgIHNhbmRib3g6IHRoaXMuY29uZmlnLmNsaWVudC5zYW5kYm94XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0RnVuZGluZygpOiB7XHJcbiAgICAgICAgYWxsb3dlZDogYW55W10sXHJcbiAgICAgICAgZGlzYWxsb3dlZDogYW55W11cclxuICAgIH0gfCB1bmRlZmluZWQge1xyXG4gICAgICAgIC8vIHJlc29sdmUgZnVuZGluZyB0byB1c2UgcGF5cGFsJ3MgcHJvcGVydGllc1xyXG4gICAgICAgIGlmICghdGhpcy5jb25maWcuZnVuZGluZykge1xyXG4gICAgICAgICAgICAvLyBubyBmdW5kaW5nIHByb3ZpZGVkXHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBhbGxvd2VkOiBhbnlbXSA9IFtdO1xyXG4gICAgICAgIGNvbnN0IGRpc2FsbG93ZWQ6IGFueVtdID0gW107XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5mdW5kaW5nLmFsbG93ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jb25maWcuZnVuZGluZy5hbGxvd2VkLmZvckVhY2godHlwZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBhbGxvd2VkLnB1c2godGhpcy5tYXBGdW5kaW5nVHlwZSh0eXBlKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmZ1bmRpbmcuZGlzYWxsb3dlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5mdW5kaW5nLmRpc2FsbG93ZWQuZm9yRWFjaCh0eXBlID0+IHtcclxuICAgICAgICAgICAgICAgIGRpc2FsbG93ZWQucHVzaCh0aGlzLm1hcEZ1bmRpbmdUeXBlKHR5cGUpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBhbGxvd2VkOiBhbGxvd2VkLFxyXG4gICAgICAgICAgICBkaXNhbGxvd2VkOiBkaXNhbGxvd2VkXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG1hcEZ1bmRpbmdUeXBlKHR5cGU6IFBheVBhbEZ1bmRpbmcpOiBhbnkge1xyXG4gICAgICAgIGlmICh0eXBlID09PSBQYXlQYWxGdW5kaW5nLkNhcmQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHBheXBhbC5GVU5ESU5HLkNBUkQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlID09PSBQYXlQYWxGdW5kaW5nLkNyZWRpdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcGF5cGFsLkZVTkRJTkcuQ1JFRElUO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZSA9PT0gUGF5UGFsRnVuZGluZy5FbHYpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHBheXBhbC5GVU5ESU5HLkVMVjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhyb3cgRXJyb3IoYFVuc3VwcG9ydGVkIGZ1bmRpbmcgdHlwZSAnJHt0eXBlfSdgKTtcclxuICAgIH1cclxufVxyXG5cclxuIiwiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IE5neFBheXBhbENvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9wYXlwYWwtY29tcG9uZW50JztcclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgaW1wb3J0czogW1xyXG4gIF0sXHJcbiAgZGVjbGFyYXRpb25zOiBbXHJcbiAgICBOZ3hQYXlwYWxDb21wb25lbnQsXHJcbiAgXSxcclxuICBleHBvcnRzOiBbXHJcbiAgICBOZ3hQYXlwYWxDb21wb25lbnQsXHJcbiAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmd4UGF5UGFsTW9kdWxlIHtcclxufVxyXG5cclxuXHJcbiIsImV4cG9ydCBlbnVtIFBheVBhbEVudmlyb25tZW50IHtcclxuICAgIFNhbmRib3ggPSAnc2FuZGJveCcsXHJcbiAgICBQcm9kdWN0aW9uID0gJ3Byb2R1Y3Rpb24nXHJcbn1cclxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7SUFDSSxPQUFJO0lBQ0osU0FBTTtJQUNOLE1BQUc7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