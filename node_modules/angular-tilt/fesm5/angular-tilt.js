import { Directive, ElementRef, Input, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var VanillaTilt = /** @class */ (function () {
    function VanillaTilt(element, settings) {
        if (settings === void 0) { settings = {}; }
        if (!(element instanceof Node)) {
            throw "Can't initialize VanillaTilt because " +
                element +
                " is not a Node.";
        }
        this.width = null;
        this.height = null;
        this.left = null;
        this.top = null;
        this.transitionTimeout = null;
        this.updateCall = null;
        this.updateBind = this.update.bind(this);
        this.resetBind = this.reset.bind(this);
        this.element = element;
        this.settings = this.extendSettings(settings);
        this.elementListener = this.getElementListener();
        this.reverse = this.settings.reverse ? -1 : 1;
        this.glare = this.isSettingTrue(this.settings.glare);
        this.glarePrerender = this.isSettingTrue(this.settings["glare-prerender"]);
        this.gyroscope = this.isSettingTrue(this.settings.gyroscope);
        if (this.glare) {
            this.prepareGlare();
        }
        this.addEventListeners();
    }
    /**
     * @param {?} setting
     * @return {?}
     */
    VanillaTilt.prototype.isSettingTrue = /**
     * @param {?} setting
     * @return {?}
     */
    function (setting) {
        return setting === "" || setting === true || setting === 1;
    };
    /**
     * @return {?}
     */
    VanillaTilt.prototype.getElementListener = /**
     * @return {?}
     */
    function () {
        if (!this.settings || !this.settings["mouse-event-element"]) {
            return this.element;
        }
        if (typeof this.settings["mouse-event-element"] === "string") {
            /** @type {?} */
            var mouseEventElement = document.querySelector(this.settings["mouse-event-element"]);
            if (mouseEventElement) {
                return mouseEventElement;
            }
        }
        if (this.settings["mouse-event-element"] instanceof Node) {
            return this.settings["mouse-event-element"];
        }
    };
    /**
     * @return {?}
     */
    VanillaTilt.prototype.addEventListeners = /**
     * @return {?}
     */
    function () {
        this.onMouseEnterBind = this.onMouseEnter.bind(this);
        this.onMouseMoveBind = this.onMouseMove.bind(this);
        this.onMouseLeaveBind = this.onMouseLeave.bind(this);
        this.onWindowResizeBind = this.onWindowResize.bind(this);
        this.onDeviceOrientationBind = this.onDeviceOrientation.bind(this);
        this.elementListener.addEventListener("mouseenter", this.onMouseEnterBind);
        this.elementListener.addEventListener("mousemove", this.onMouseMoveBind);
        this.elementListener.addEventListener("mouseleave", this.onMouseLeaveBind);
        if (this.glare) {
            window.addEventListener("resize", this.onWindowResizeBind);
        }
        if (this.gyroscope) {
            window.addEventListener("deviceorientation", this.onDeviceOrientationBind);
        }
    };
    /**
     * Method remove event listeners from current this.elementListener
     */
    /**
     * Method remove event listeners from current this.elementListener
     * @return {?}
     */
    VanillaTilt.prototype.removeEventListeners = /**
     * Method remove event listeners from current this.elementListener
     * @return {?}
     */
    function () {
        this.elementListener.removeEventListener("mouseenter", this.onMouseEnterBind);
        this.elementListener.removeEventListener("mousemove", this.onMouseMoveBind);
        this.elementListener.removeEventListener("mouseleave", this.onMouseLeaveBind);
        if (this.gyroscope) {
            window.removeEventListener("deviceorientation", this.onDeviceOrientationBind);
        }
        if (this.glare) {
            window.removeEventListener("resize", this.onWindowResizeBind);
        }
    };
    /**
     * @return {?}
     */
    VanillaTilt.prototype.destroy = /**
     * @return {?}
     */
    function () {
        clearTimeout(this.transitionTimeout);
        if (this.updateCall !== null) {
            cancelAnimationFrame(this.updateCall);
        }
        this.reset();
        this.removeEventListeners();
        this.element.vanillaTilt = null;
        delete this.element.vanillaTilt;
        this.element = null;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    VanillaTilt.prototype.onDeviceOrientation = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.gamma === null || event.beta === null) {
            return;
        }
        this.updateElementPosition();
        /** @type {?} */
        var totalAngleX = this.settings.gyroscopeMaxAngleX - this.settings.gyroscopeMinAngleX;
        /** @type {?} */
        var totalAngleY = this.settings.gyroscopeMaxAngleY - this.settings.gyroscopeMinAngleY;
        /** @type {?} */
        var degreesPerPixelX = totalAngleX / this.width;
        /** @type {?} */
        var degreesPerPixelY = totalAngleY / this.height;
        /** @type {?} */
        var angleX = event.gamma - this.settings.gyroscopeMinAngleX;
        /** @type {?} */
        var angleY = event.beta - this.settings.gyroscopeMinAngleY;
        /** @type {?} */
        var posX = angleX / degreesPerPixelX;
        /** @type {?} */
        var posY = angleY / degreesPerPixelY;
        if (this.updateCall !== null) {
            cancelAnimationFrame(this.updateCall);
        }
        this.event = {
            clientX: posX + this.left,
            clientY: posY + this.top
        };
        this.updateCall = requestAnimationFrame(this.updateBind);
    };
    /**
     * @return {?}
     */
    VanillaTilt.prototype.onMouseEnter = /**
     * @return {?}
     */
    function () {
        this.updateElementPosition();
        this.element.style.willChange = "transform";
        this.setTransition();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    VanillaTilt.prototype.onMouseMove = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.updateCall !== null) {
            cancelAnimationFrame(this.updateCall);
        }
        this.event = event;
        this.updateCall = requestAnimationFrame(this.updateBind);
    };
    /**
     * @return {?}
     */
    VanillaTilt.prototype.onMouseLeave = /**
     * @return {?}
     */
    function () {
        this.setTransition();
        if (this.settings.reset) {
            requestAnimationFrame(this.resetBind);
        }
    };
    /**
     * @return {?}
     */
    VanillaTilt.prototype.reset = /**
     * @return {?}
     */
    function () {
        this.event = {
            pageX: this.left + this.width / 2,
            pageY: this.top + this.height / 2
        };
        if (this.element && this.element.style) {
            this.element.style.transform =
                "perspective(" + this.settings.perspective + "px) " +
                    "rotateX(0deg) " +
                    "rotateY(0deg) " +
                    "scale3d(1, 1, 1)";
        }
        if (this.glare) {
            this.glareElement.style.transform =
                "rotate(180deg) translate(-50%, -50%)";
            this.glareElement.style.opacity = "0";
        }
    };
    /**
     * @return {?}
     */
    VanillaTilt.prototype.getValues = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var x = (this.event.clientX - this.left) / this.width;
        /** @type {?} */
        var y = (this.event.clientY - this.top) / this.height;
        x = Math.min(Math.max(x, 0), 1);
        y = Math.min(Math.max(y, 0), 1);
        /** @type {?} */
        var tiltX = (this.reverse *
            (this.settings.max / 2 - x * this.settings.max)).toFixed(2);
        /** @type {?} */
        var tiltY = (this.reverse *
            (y * this.settings.max - this.settings.max / 2)).toFixed(2);
        /** @type {?} */
        var angle = Math.atan2(this.event.clientX - (this.left + this.width / 2), -(this.event.clientY - (this.top + this.height / 2))) *
            (180 / Math.PI);
        return {
            tiltX: tiltX,
            tiltY: tiltY,
            percentageX: x * 100,
            percentageY: y * 100,
            angle: angle
        };
    };
    /**
     * @return {?}
     */
    VanillaTilt.prototype.updateElementPosition = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var rect = this.element.getBoundingClientRect();
        this.width = this.element.offsetWidth;
        this.height = this.element.offsetHeight;
        this.left = rect.left;
        this.top = rect.top;
    };
    /**
     * @return {?}
     */
    VanillaTilt.prototype.update = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var values = this.getValues();
        this.element.style.transform =
            "perspective(" +
                this.settings.perspective +
                "px) " +
                "rotateX(" +
                (this.settings.axis === "x" ? 0 : values.tiltY) +
                "deg) " +
                "rotateY(" +
                (this.settings.axis === "y" ? 0 : values.tiltX) +
                "deg) " +
                "scale3d(" +
                this.settings.scale +
                ", " +
                this.settings.scale +
                ", " +
                this.settings.scale +
                ")";
        if (this.glare) {
            this.glareElement.style.transform = "rotate(" + values.angle + "deg) translate(-50%, -50%)";
            this.glareElement.style.opacity = "" + (values.percentageY *
                this.settings["max-glare"]) /
                100;
        }
        this.element.dispatchEvent(new CustomEvent("tiltChange", {
            detail: values
        }));
        this.updateCall = null;
    };
    /**
     * Appends the glare element (if glarePrerender equals false)
     * and sets the default style
     */
    /**
     * Appends the glare element (if glarePrerender equals false)
     * and sets the default style
     * @return {?}
     */
    VanillaTilt.prototype.prepareGlare = /**
     * Appends the glare element (if glarePrerender equals false)
     * and sets the default style
     * @return {?}
     */
    function () {
        // If option pre-render is enabled we assume all html/css is present for an optimal glare effect.
        if (!this.glarePrerender) {
            // Create glare element
            /** @type {?} */
            var jsTiltGlare = document.createElement("div");
            jsTiltGlare.classList.add("js-tilt-glare");
            /** @type {?} */
            var jsTiltGlareInner = document.createElement("div");
            jsTiltGlareInner.classList.add("js-tilt-glare-inner");
            jsTiltGlare.appendChild(jsTiltGlareInner);
            this.element.appendChild(jsTiltGlare);
        }
        this.glareElementWrapper = this.element.querySelector(".js-tilt-glare");
        this.glareElement = this.element.querySelector(".js-tilt-glare-inner");
        if (this.glarePrerender) {
            return;
        }
        Object.assign(this.glareElementWrapper.style, {
            position: "absolute",
            top: "0",
            left: "0",
            width: "100%",
            height: "100%",
            overflow: "hidden",
            "pointer-events": "none"
        });
        Object.assign(this.glareElement.style, {
            position: "absolute",
            top: "50%",
            left: "50%",
            "pointer-events": "none",
            "background-image": "linear-gradient(0deg, rgba(255,255,255,0) 0%, rgba(255,255,255,1) 100%)",
            width: this.element.offsetWidth * 2 + "px",
            height: this.element.offsetWidth * 2 + "px",
            transform: "rotate(180deg) translate(-50%, -50%)",
            "transform-origin": "0% 0%",
            opacity: "0"
        });
    };
    /**
     * @return {?}
     */
    VanillaTilt.prototype.updateGlareSize = /**
     * @return {?}
     */
    function () {
        Object.assign(this.glareElement.style, {
            width: "" + this.element.offsetWidth * 2,
            height: "" + this.element.offsetWidth * 2
        });
    };
    /**
     * @return {?}
     */
    VanillaTilt.prototype.onWindowResize = /**
     * @return {?}
     */
    function () {
        this.updateGlareSize();
    };
    /**
     * @return {?}
     */
    VanillaTilt.prototype.setTransition = /**
     * @return {?}
     */
    function () {
        var _this = this;
        clearTimeout(this.transitionTimeout);
        this.element.style.transition =
            this.settings.speed + "ms " + this.settings.easing;
        if (this.glare)
            this.glareElement.style.transition = "opacity " + this.settings.speed + "ms " + this.settings.easing;
        this.transitionTimeout = setTimeout((/**
         * @return {?}
         */
        function () {
            _this.element.style.transition = "";
            if (_this.glare) {
                _this.glareElement.style.transition = "";
            }
        }), this.settings.speed);
    };
    /**
     * @param {?} settings
     * @return {?}
     */
    VanillaTilt.prototype.extendSettings = /**
     * @param {?} settings
     * @return {?}
     */
    function (settings) {
        /** @type {?} */
        var defaultSettings = {
            reverse: false,
            max: 35,
            perspective: 1000,
            easing: "cubic-bezier(.03,.98,.52,.99)",
            scale: 1,
            speed: 300,
            transition: true,
            axis: null,
            glare: false,
            "max-glare": 1,
            "glare-prerender": false,
            "mouse-event-element": null,
            reset: true,
            gyroscope: true,
            gyroscopeMinAngleX: -45,
            gyroscopeMaxAngleX: 45,
            gyroscopeMinAngleY: -45,
            gyroscopeMaxAngleY: 45
        };
        /** @type {?} */
        var newSettings = {};
        for (var property in defaultSettings) {
            if (property in settings) {
                newSettings[property] = settings[property];
            }
            else if (this.element.hasAttribute("data-tilt-" + property)) {
                /** @type {?} */
                var attribute = this.element.getAttribute("data-tilt-" + property);
                try {
                    newSettings[property] = JSON.parse(attribute);
                }
                catch (e) {
                    newSettings[property] = attribute;
                }
            }
            else {
                newSettings[property] = defaultSettings[property];
            }
        }
        return newSettings;
    };
    /**
     * @param {?} elements
     * @param {?} settings
     * @return {?}
     */
    VanillaTilt.init = /**
     * @param {?} elements
     * @param {?} settings
     * @return {?}
     */
    function (elements, settings) {
        if (elements instanceof Node) {
            elements = [elements];
        }
        if (elements instanceof NodeList) {
            elements = [].slice.call(elements);
        }
        if (!(elements instanceof Array)) {
            return;
        }
        elements.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            if (!("vanillaTilt" in element)) {
                element.vanillaTilt = new VanillaTilt(element, settings);
            }
        }));
    };
    return VanillaTilt;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AngularTiltDirective = /** @class */ (function () {
    function AngularTiltDirective(el) {
        this.el = el;
    }
    /**
     * @return {?}
     */
    AngularTiltDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.tilt = new VanillaTilt(this.el.nativeElement, this.tiltSettings);
    };
    AngularTiltDirective.decorators = [
        { type: Directive, args: [{
                    selector: "[aTilt]"
                },] }
    ];
    /** @nocollapse */
    AngularTiltDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    AngularTiltDirective.propDecorators = {
        tiltSettings: [{ type: Input, args: ["tiltSettings",] }]
    };
    return AngularTiltDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AngularTiltModule = /** @class */ (function () {
    function AngularTiltModule() {
    }
    AngularTiltModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [AngularTiltDirective],
                    imports: [],
                    exports: [AngularTiltDirective]
                },] }
    ];
    return AngularTiltModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { AngularTiltModule, AngularTiltDirective as ɵa };

//# sourceMappingURL=angular-tilt.js.map