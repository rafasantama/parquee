!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/common"),require("@angular/core"),require("imagesloaded"),require("masonry-layout")):"function"==typeof define&&define.amd?define("ngx-masonry-gallery",["exports","@angular/common","@angular/core","imagesloaded","masonry-layout"],t):t((e=e||self)["ngx-masonry-gallery"]={},e.ng.common,e.ng.core,e.imagesLoadedMethod,e.masonry)}(this,function(e,t,r,n,i){"use strict";n=n&&n.hasOwnProperty("default")?n["default"]:n;var o=new(function(){function e(){}return e.prototype.newGuid=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)})},e}()),a=function(){function e(e){this.renderer=e,this.images=[],this.width=330,this.gutter=5,this.verticalGutter=5,this.imageClasses=[],this.clickImage=new r.EventEmitter,this.removeComplete=new r.EventEmitter,this.layoutComplete=new r.EventEmitter,this.galleryGuid=o.newGuid(),this.mansonryItemSelectorClass="grid-item-"+this.galleryGuid,this.activeImages=[],this.viewReady=!1}return e.prototype.ngOnChanges=function(e){e.images&&e.images.currentValue&&(this.viewReady?this.processImages(e):this.changesToProcess=e)},e.prototype.ngOnDestroy=function(){this.msnry&&this.msnry.destroy()},e.prototype.handleClick=function(e){this.clickImage.next(e)},e.prototype.ngAfterViewInit=function(){this.viewReady=!0,this.initMasonry(),this.changesToProcess&&(this.processImages(this.changesToProcess),this.changesToProcess=undefined)},e.prototype.addImages=function(e){e&&e.length>0&&this.addImagesToGallery(e)},e.prototype.removeImages=function(e){var t=this;e&&e.length>0&&e.forEach(function(e){t.removeImageFromGallery(e)})},e.prototype.processImages=function(e){var t=this.getAddedAndRemovesImages(e);this.addImages(t.addedImages),this.removeImages(t.removedImages)},e.prototype.getAddedAndRemovesImages=function(e){var t=[],r=[],n=e.images.currentValue,i=e.images.previousValue;return i?(n.forEach(function(e){i.find(function(t){return t.imageUrl.toLowerCase()===e.imageUrl.toLowerCase()})||t.push(e)}),i.forEach(function(e){n.find(function(t){return t.imageUrl.toLowerCase()===e.imageUrl.toLowerCase()})||r.push(e)})):t=e.images.currentValue,{addedImages:t,removedImages:r}},e.prototype.initMasonry=function(){if(this.grid=document.getElementById(this.galleryGuid),this.grid.innerHTML="",!this.grid)throw Error("Could not init mansory due to non existing elem with id '"+this.galleryGuid+"'");this.msnry=new i(this.grid,{itemSelector:"."+this.mansonryItemSelectorClass,columnWidth:this.width,gutter:this.gutter});var e=this;this.msnry.on("layoutComplete",function(t){e.layoutComplete.next(t)}),this.msnry.on("removeComplete",function(t){e.removeComplete.next(t)})},e.prototype.removeImageFromGallery=function(e){var t=this.activeImages.find(function(t){return t.image.imageUrl.toLowerCase()===e.imageUrl.toLowerCase()});if(t){var r=document.getElementById(t.id);if(r){this.msnry.remove(r),this.msnry.layout();for(var n=0;n<this.activeImages.length;n++){this.activeImages[n].image.imageUrl.toLowerCase()===t.image.imageUrl.toLowerCase()&&this.activeImages.splice(n,1)}}else console.warn("Image with id '{"+t.id+"}' was not found in DOM. Have you manipulated the DOM in some way?")}else console.warn("Image with url '"+e.imageUrl+"' was not found. If you are adding images, make sure to 'replace' the images array with a new one\n                so that detection change can be executed instead of just adding an image to array\n                (which doesn't fire change detection on array property)")},e.prototype.addImagesToGallery=function(e){var t=this;if(!this.grid)throw Error("Grid element is not yet ready, are you trying to add image too soon?");var r=this.renderer.createElement("span");e.forEach(function(e){var n=t.getImageId(),i=t.renderer.createElement("img");i.setAttribute("id",n),i.setAttribute("alt",e.alt?e.alt:"no description"),i.setAttribute("src",e.imageUrl),i.setAttribute("style","display: none; width: "+t.width+"px; margin-bottom: "+t.verticalGutter+"px"),i.className=t.getImageClass(),i.addEventListener("click",function(){t.handleClick(e)}),t.activeImages.push({id:n,image:e}),t.renderer.appendChild(r,i)}),this.renderer.appendChild(this.grid,r),n(r).on("progress",function(e,r){r.isLoaded&&(t.renderer.appendChild(t.grid,r.img),t.renderer.setStyle(r.img,"display","block"),t.msnry.appended(r.img),t.msnry.reloadItems())})},e.prototype.getImageClass=function(){var e=this.mansonryItemSelectorClass;this.imageClasses&&this.imageClasses.length>0&&(e+=" "+this.imageClasses.join(" "));return e},e.prototype.getImageId=function(){return this.galleryGuid+"_"+o.newGuid()},e.decorators=[{type:r.Component,args:[{changeDetection:r.ChangeDetectionStrategy.OnPush,selector:"ngx-masonry-gallery",template:'<div [id]="galleryGuid"></div>'}]}],e.ctorParameters=function(){return[{type:r.Renderer2}]},e.propDecorators={images:[{type:r.Input}],width:[{type:r.Input}],gutter:[{type:r.Input}],verticalGutter:[{type:r.Input}],imageClasses:[{type:r.Input}],clickImage:[{type:r.Output}],removeComplete:[{type:r.Output}],layoutComplete:[{type:r.Output}]},e}(),s=function(){function e(){}return e.decorators=[{type:r.NgModule,args:[{imports:[t.CommonModule],declarations:[a],exports:[a]}]}],e}(),m=function(){return function(){}}();e.IMasonryGalleryImage=m,e.MasonryGalleryComponent=a,e.MasonryGalleryModule=s,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=ngx-masonry-gallery.umd.min.js.map