{"version":3,"sources":["ng://ngx-masonry-gallery/lib/utilities.ts","ng://ngx-masonry-gallery/lib/masonry-gallery.component.ts","ng://ngx-masonry-gallery/lib/masonry-gallery.module.ts","ng://ngx-masonry-gallery/lib/masonry-gallery-models.ts"],"names":["utilities","Utilities","prototype","newGuid","replace","c","r","Math","random","toString","MasonryGalleryComponent","renderer","this","images","width","gutter","verticalGutter","imageClasses","clickImage","EventEmitter","removeComplete","layoutComplete","galleryGuid","mansonryItemSelectorClass","activeImages","viewReady","ngOnChanges","changes","currentValue","processImages","changesToProcess","ngOnDestroy","msnry","destroy","handleClick","image","next","ngAfterViewInit","initMasonry","undefined","addImages","length","addImagesToGallery","removeImages","_this","forEach","removeImageFromGallery","imagesToProcess","getAddedAndRemovesImages","addedImages","removedImages","newImagesValue","oldImagesValue","newImage","find","m","imageUrl","toLowerCase","push","oldImage","grid","document","getElementById","innerHTML","Error","masonry","itemSelector","columnWidth","that","on","items","imageIdResult","imageElem","id","remove","layout","i","splice","console","warn","imagesWrapper","createElement","imageId","getImageId","setAttribute","alt","className","getImageClass","addEventListener","appendChild","imagesLoadedMethod","instance","isLoaded","img","setStyle","appended","reloadItems","join","Component","args","changeDetection","ChangeDetectionStrategy","OnPush","selector","template","Renderer2","Input","Output","MasonryGalleryModule","NgModule","imports","CommonModule","declarations","exports","IMasonryGalleryImage"],"mappings":"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","sourcesContent":["export class Utilities {\r\n    newGuid() {\r\n       return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n           // tslint:disable-next-line:no-bitwise triple-equals\r\n           const r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n           return v.toString(16);\r\n       });\r\n   }\r\n}\r\n\r\nexport let utilities = new Utilities();\r\n","import {\r\n    AfterViewInit,\r\n    Component,\r\n    EventEmitter,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    Output,\r\n    Renderer2,\r\n    SimpleChanges,\r\n    ChangeDetectionStrategy,\r\n} from '@angular/core';\r\nimport imagesLoadedMethod from 'imagesloaded';\r\nimport * as masonry from 'masonry-layout';\r\n\r\nimport { IMasonryGalleryImage } from './masonry-gallery-models';\r\nimport { utilities } from './utilities';\r\n\r\n@Component({\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    selector: 'ngx-masonry-gallery',\r\n    template: '<div [id]=\"galleryGuid\"></div>'\r\n})\r\nexport class MasonryGalleryComponent\r\n    implements AfterViewInit, OnDestroy, OnChanges {\r\n    @Input() images: IMasonryGalleryImage[] = [];\r\n    @Input() width: number = 330;\r\n    @Input() gutter: number = 5;\r\n    @Input() verticalGutter: number = 5;\r\n    @Input() imageClasses: string[] = [];\r\n\r\n    @Output() clickImage = new EventEmitter<IMasonryGalleryImage>();\r\n    @Output() removeComplete = new EventEmitter<any[]>();\r\n    @Output() layoutComplete = new EventEmitter<any[]>();\r\n\r\n    public readonly galleryGuid: string = utilities.newGuid();\r\n\r\n    private readonly mansonryItemSelectorClass = `grid-item-${this.galleryGuid}`;\r\n    private readonly activeImages: ActiveImage[] = [];\r\n\r\n    private msnry?: any;\r\n    private grid?: any;\r\n    private changesToProcess?: SimpleChanges;\r\n    private viewReady: boolean = false;\r\n\r\n    constructor(private renderer: Renderer2) { }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes.images && changes.images.currentValue) {\r\n            if (!this.viewReady) {\r\n                // process images once we can\r\n                this.changesToProcess = changes;\r\n            } else {\r\n                this.processImages(changes);\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.msnry) {\r\n            this.msnry.destroy();\r\n        }\r\n    }\r\n\r\n    handleClick(image: IMasonryGalleryImage): void {\r\n        this.clickImage.next(image);\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        this.viewReady = true;\r\n        this.initMasonry();\r\n\r\n        // process images now\r\n        if (this.changesToProcess) {\r\n            this.processImages(this.changesToProcess);\r\n            this.changesToProcess = undefined;\r\n        }\r\n    }\r\n\r\n    addImages(images: IMasonryGalleryImage[]): void {\r\n        if (images && images.length > 0) {\r\n            this.addImagesToGallery(images);\r\n        }\r\n    }\r\n\r\n    removeImages(images: IMasonryGalleryImage[]): void {\r\n        if (images && images.length > 0) {\r\n            images.forEach(image => {\r\n                this.removeImageFromGallery(image);\r\n            });\r\n        }\r\n    }\r\n\r\n    private processImages(changes: SimpleChanges): void {\r\n        const imagesToProcess = this.getAddedAndRemovesImages(changes);\r\n\r\n        // add images to mansonry layout\r\n        this.addImages(imagesToProcess.addedImages);\r\n\r\n        // removes images from layout\r\n        this.removeImages(imagesToProcess.removedImages);\r\n    }\r\n\r\n    private getAddedAndRemovesImages(\r\n        changes: SimpleChanges\r\n    ): {\r\n            addedImages: IMasonryGalleryImage[];\r\n            removedImages: IMasonryGalleryImage[];\r\n        } {\r\n        let addedImages: IMasonryGalleryImage[] = [];\r\n        const removedImages: IMasonryGalleryImage[] = [];\r\n\r\n        const newImagesValue = changes.images\r\n            .currentValue as IMasonryGalleryImage[];\r\n        const oldImagesValue = changes.images\r\n            .previousValue as IMasonryGalleryImage[];\r\n\r\n        if (!oldImagesValue) {\r\n            // all images are new ones\r\n            addedImages = changes.images.currentValue;\r\n        } else {\r\n            // process added images\r\n            newImagesValue.forEach(newImage => {\r\n                const existingImage = oldImagesValue.find(\r\n                    m => m.imageUrl.toLowerCase() === newImage.imageUrl.toLowerCase()\r\n                );\r\n\r\n                if (existingImage) {\r\n                    // image was in previous value && is in new, do nothing\r\n                } else {\r\n                    // image is new\r\n                    addedImages.push(newImage);\r\n                }\r\n            });\r\n\r\n            // process removed images\r\n            oldImagesValue.forEach(oldImage => {\r\n                const existingImage = newImagesValue.find(\r\n                    m => m.imageUrl.toLowerCase() === oldImage.imageUrl.toLowerCase()\r\n                );\r\n\r\n                if (existingImage) {\r\n                    // image was in previous value && is in new, do nothing\r\n                } else {\r\n                    // image is removed\r\n                    removedImages.push(oldImage);\r\n                }\r\n            });\r\n        }\r\n\r\n        return {\r\n            addedImages: addedImages,\r\n            removedImages: removedImages\r\n        };\r\n    }\r\n\r\n    private initMasonry(): void {\r\n        this.grid = document.getElementById(this.galleryGuid);\r\n\r\n        // remove all existing data from grid\r\n        this.grid.innerHTML = '';\r\n\r\n        if (!this.grid) {\r\n            throw Error(\r\n                `Could not init mansory due to non existing elem with id '${\r\n                this.galleryGuid\r\n                }'`\r\n            );\r\n        }\r\n\r\n        this.msnry = new masonry(this.grid, {\r\n            // options...\r\n            itemSelector: '.' + this.mansonryItemSelectorClass,\r\n            columnWidth: this.width,\r\n            gutter: this.gutter,\r\n        });\r\n\r\n        const that = this;\r\n\r\n        this.msnry.on('layoutComplete', function (items) {\r\n            that.layoutComplete.next(items);\r\n        });\r\n\r\n        this.msnry.on('removeComplete', function (items) {\r\n            that.removeComplete.next(items);\r\n        });\r\n    }\r\n\r\n    private removeImageFromGallery(image: IMasonryGalleryImage): void {\r\n        // get image guid\r\n        const imageIdResult = this.activeImages.find(\r\n            m => m.image.imageUrl.toLowerCase() === image.imageUrl.toLowerCase()\r\n        );\r\n\r\n        if (!imageIdResult) {\r\n            // image was not found, this is probably an error\r\n            console.warn(\r\n                `Image with url '${\r\n                image.imageUrl\r\n                }' was not found. If you are adding images, make sure to 'replace' the images array with a new one\r\n                so that detection change can be executed instead of just adding an image to array\r\n                (which doesn't fire change detection on array property)`\r\n            );\r\n            return;\r\n        }\r\n\r\n        // find image based on its id\r\n        const imageElem = document.getElementById(imageIdResult.id);\r\n\r\n        if (!imageElem) {\r\n            // image was not found in DOM\r\n            console.warn(\r\n                `Image with id '{${\r\n                imageIdResult.id\r\n                }}' was not found in DOM. Have you manipulated the DOM in some way?`\r\n            );\r\n            return;\r\n        }\r\n\r\n        // remove image from gallery\r\n        this.msnry.remove(imageElem);\r\n\r\n        // refresh layout\r\n        this.msnry.layout();\r\n\r\n        // remove image from array\r\n        for (let i = 0; i < this.activeImages.length; i++) {\r\n            const idWithImage = this.activeImages[i];\r\n            if (\r\n                idWithImage.image.imageUrl.toLowerCase() ===\r\n                imageIdResult.image.imageUrl.toLowerCase()\r\n            ) {\r\n                this.activeImages.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    private addImagesToGallery(images: IMasonryGalleryImage[]): void {\r\n        if (!this.grid) {\r\n            throw Error(\r\n                'Grid element is not yet ready, are you trying to add image too soon?'\r\n            );\r\n        }\r\n\r\n        const imagesWrapper = this.renderer.createElement('span');\r\n\r\n        images.forEach(image => {\r\n            // generate unique image id\r\n            const imageId = this.getImageId();\r\n\r\n            // create element\r\n            const imageElem = this.renderer.createElement('img');\r\n            imageElem.setAttribute('id', imageId);\r\n            imageElem.setAttribute('alt', image.alt ? image.alt : 'no description');\r\n            imageElem.setAttribute('src', image.imageUrl);\r\n            // note - images are hidden by default and should be shown only after they are loaded\r\n            imageElem.setAttribute(\r\n                'style',\r\n                `display: none; width: ${this.width}px; margin-bottom: ${\r\n                this.verticalGutter\r\n                }px`\r\n            );\r\n            imageElem.className = this.getImageClass();\r\n            imageElem.addEventListener('click', () => {\r\n                this.handleClick(image);\r\n            });\r\n\r\n            // store guid with this image\r\n            this.activeImages.push({\r\n                id: imageId,\r\n                image: image\r\n            });\r\n\r\n            // add to dom and mansory & refresh layout\r\n            this.renderer.appendChild(imagesWrapper, imageElem);\r\n        });\r\n\r\n        // add html to dom\r\n        this.renderer.appendChild(this.grid, imagesWrapper);\r\n\r\n        // add images once they are loaded\r\n        const imgLoad = imagesLoadedMethod(imagesWrapper);\r\n        imgLoad.on('progress', (instance, image) => {\r\n            if (image.isLoaded) {\r\n                this.renderer.appendChild(this.grid, image.img);\r\n                // unhide image\r\n                this.renderer.setStyle(image.img, 'display', 'block');\r\n                this.msnry.appended(image.img);\r\n                this.msnry.reloadItems();\r\n            }\r\n        });\r\n    }\r\n\r\n    private getImageClass(): string {\r\n        let className = this.mansonryItemSelectorClass;\r\n\r\n        if (this.imageClasses && this.imageClasses.length > 0) {\r\n            const customClass = this.imageClasses.join(' ');\r\n\r\n            className += ' ' + customClass;\r\n        }\r\n\r\n        return className;\r\n    }\r\n\r\n    private getImageId(): string {\r\n        return this.galleryGuid + '_' + utilities.newGuid();\r\n    }\r\n}\r\n\r\ninterface ActiveImage {\r\n    id: string;\r\n    image: IMasonryGalleryImage;\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { MasonryGalleryComponent } from './masonry-gallery.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    declarations: [\r\n        MasonryGalleryComponent,\r\n    ],\r\n    exports: [\r\n        MasonryGalleryComponent,\r\n    ],\r\n})\r\nexport class MasonryGalleryModule { }\r\n","export class IMasonryGalleryImage {\r\n    public imageUrl: string;\r\n    public alt?: string;\r\n}\r\n"]}