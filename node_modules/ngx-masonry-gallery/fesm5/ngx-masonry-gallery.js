import { CommonModule } from '@angular/common';
import { Component, ChangeDetectionStrategy, Renderer2, Input, Output, EventEmitter, NgModule } from '@angular/core';
import imagesLoadedMethod from 'imagesloaded';
import * as masonry from 'masonry-layout';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var Utilities = /** @class */ (function () {
    function Utilities() {
    }
    /**
     * @return {?}
     */
    Utilities.prototype.newGuid = /**
     * @return {?}
     */
    function () {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (/**
         * @param {?} c
         * @return {?}
         */
        function (c) {
            // tslint:disable-next-line:no-bitwise triple-equals
            /** @type {?} */
            var r = Math.random() * 16 | 0;
            /** @type {?} */
            var v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        }));
    };
    return Utilities;
}());
/** @type {?} */
var utilities = new Utilities();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MasonryGalleryComponent = /** @class */ (function () {
    function MasonryGalleryComponent(renderer) {
        this.renderer = renderer;
        this.images = [];
        this.width = 330;
        this.gutter = 5;
        this.verticalGutter = 5;
        this.imageClasses = [];
        this.clickImage = new EventEmitter();
        this.removeComplete = new EventEmitter();
        this.layoutComplete = new EventEmitter();
        this.galleryGuid = utilities.newGuid();
        this.mansonryItemSelectorClass = "grid-item-" + this.galleryGuid;
        this.activeImages = [];
        this.viewReady = false;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    MasonryGalleryComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.images && changes.images.currentValue) {
            if (!this.viewReady) {
                // process images once we can
                this.changesToProcess = changes;
            }
            else {
                this.processImages(changes);
            }
        }
    };
    /**
     * @return {?}
     */
    MasonryGalleryComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.msnry) {
            this.msnry.destroy();
        }
    };
    /**
     * @param {?} image
     * @return {?}
     */
    MasonryGalleryComponent.prototype.handleClick = /**
     * @param {?} image
     * @return {?}
     */
    function (image) {
        this.clickImage.next(image);
    };
    /**
     * @return {?}
     */
    MasonryGalleryComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.viewReady = true;
        this.initMasonry();
        // process images now
        if (this.changesToProcess) {
            this.processImages(this.changesToProcess);
            this.changesToProcess = undefined;
        }
    };
    /**
     * @param {?} images
     * @return {?}
     */
    MasonryGalleryComponent.prototype.addImages = /**
     * @param {?} images
     * @return {?}
     */
    function (images) {
        if (images && images.length > 0) {
            this.addImagesToGallery(images);
        }
    };
    /**
     * @param {?} images
     * @return {?}
     */
    MasonryGalleryComponent.prototype.removeImages = /**
     * @param {?} images
     * @return {?}
     */
    function (images) {
        var _this = this;
        if (images && images.length > 0) {
            images.forEach((/**
             * @param {?} image
             * @return {?}
             */
            function (image) {
                _this.removeImageFromGallery(image);
            }));
        }
    };
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    MasonryGalleryComponent.prototype.processImages = /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        /** @type {?} */
        var imagesToProcess = this.getAddedAndRemovesImages(changes);
        // add images to mansonry layout
        this.addImages(imagesToProcess.addedImages);
        // removes images from layout
        this.removeImages(imagesToProcess.removedImages);
    };
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    MasonryGalleryComponent.prototype.getAddedAndRemovesImages = /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        /** @type {?} */
        var addedImages = [];
        /** @type {?} */
        var removedImages = [];
        /** @type {?} */
        var newImagesValue = (/** @type {?} */ (changes.images
            .currentValue));
        /** @type {?} */
        var oldImagesValue = (/** @type {?} */ (changes.images
            .previousValue));
        if (!oldImagesValue) {
            // all images are new ones
            addedImages = changes.images.currentValue;
        }
        else {
            // process added images
            newImagesValue.forEach((/**
             * @param {?} newImage
             * @return {?}
             */
            function (newImage) {
                /** @type {?} */
                var existingImage = oldImagesValue.find((/**
                 * @param {?} m
                 * @return {?}
                 */
                function (m) { return m.imageUrl.toLowerCase() === newImage.imageUrl.toLowerCase(); }));
                if (existingImage) ;
                else {
                    // image is new
                    addedImages.push(newImage);
                }
            }));
            // process removed images
            oldImagesValue.forEach((/**
             * @param {?} oldImage
             * @return {?}
             */
            function (oldImage) {
                /** @type {?} */
                var existingImage = newImagesValue.find((/**
                 * @param {?} m
                 * @return {?}
                 */
                function (m) { return m.imageUrl.toLowerCase() === oldImage.imageUrl.toLowerCase(); }));
                if (existingImage) ;
                else {
                    // image is removed
                    removedImages.push(oldImage);
                }
            }));
        }
        return {
            addedImages: addedImages,
            removedImages: removedImages
        };
    };
    /**
     * @private
     * @return {?}
     */
    MasonryGalleryComponent.prototype.initMasonry = /**
     * @private
     * @return {?}
     */
    function () {
        this.grid = document.getElementById(this.galleryGuid);
        // remove all existing data from grid
        this.grid.innerHTML = '';
        if (!this.grid) {
            throw Error("Could not init mansory due to non existing elem with id '" + this.galleryGuid + "'");
        }
        this.msnry = new masonry(this.grid, {
            // options...
            itemSelector: '.' + this.mansonryItemSelectorClass,
            columnWidth: this.width,
            gutter: this.gutter,
        });
        /** @type {?} */
        var that = this;
        this.msnry.on('layoutComplete', (/**
         * @param {?} items
         * @return {?}
         */
        function (items) {
            that.layoutComplete.next(items);
        }));
        this.msnry.on('removeComplete', (/**
         * @param {?} items
         * @return {?}
         */
        function (items) {
            that.removeComplete.next(items);
        }));
    };
    /**
     * @private
     * @param {?} image
     * @return {?}
     */
    MasonryGalleryComponent.prototype.removeImageFromGallery = /**
     * @private
     * @param {?} image
     * @return {?}
     */
    function (image) {
        // get image guid
        /** @type {?} */
        var imageIdResult = this.activeImages.find((/**
         * @param {?} m
         * @return {?}
         */
        function (m) { return m.image.imageUrl.toLowerCase() === image.imageUrl.toLowerCase(); }));
        if (!imageIdResult) {
            // image was not found, this is probably an error
            console.warn("Image with url '" + image.imageUrl + "' was not found. If you are adding images, make sure to 'replace' the images array with a new one\n                so that detection change can be executed instead of just adding an image to array\n                (which doesn't fire change detection on array property)");
            return;
        }
        // find image based on its id
        /** @type {?} */
        var imageElem = document.getElementById(imageIdResult.id);
        if (!imageElem) {
            // image was not found in DOM
            console.warn("Image with id '{" + imageIdResult.id + "}' was not found in DOM. Have you manipulated the DOM in some way?");
            return;
        }
        // remove image from gallery
        this.msnry.remove(imageElem);
        // refresh layout
        this.msnry.layout();
        // remove image from array
        for (var i = 0; i < this.activeImages.length; i++) {
            /** @type {?} */
            var idWithImage = this.activeImages[i];
            if (idWithImage.image.imageUrl.toLowerCase() ===
                imageIdResult.image.imageUrl.toLowerCase()) {
                this.activeImages.splice(i, 1);
            }
        }
    };
    /**
     * @private
     * @param {?} images
     * @return {?}
     */
    MasonryGalleryComponent.prototype.addImagesToGallery = /**
     * @private
     * @param {?} images
     * @return {?}
     */
    function (images) {
        var _this = this;
        if (!this.grid) {
            throw Error('Grid element is not yet ready, are you trying to add image too soon?');
        }
        /** @type {?} */
        var imagesWrapper = this.renderer.createElement('span');
        images.forEach((/**
         * @param {?} image
         * @return {?}
         */
        function (image) {
            // generate unique image id
            /** @type {?} */
            var imageId = _this.getImageId();
            // create element
            /** @type {?} */
            var imageElem = _this.renderer.createElement('img');
            imageElem.setAttribute('id', imageId);
            imageElem.setAttribute('alt', image.alt ? image.alt : 'no description');
            imageElem.setAttribute('src', image.imageUrl);
            // note - images are hidden by default and should be shown only after they are loaded
            imageElem.setAttribute('style', "display: none; width: " + _this.width + "px; margin-bottom: " + _this.verticalGutter + "px");
            imageElem.className = _this.getImageClass();
            imageElem.addEventListener('click', (/**
             * @return {?}
             */
            function () {
                _this.handleClick(image);
            }));
            // store guid with this image
            _this.activeImages.push({
                id: imageId,
                image: image
            });
            // add to dom and mansory & refresh layout
            _this.renderer.appendChild(imagesWrapper, imageElem);
        }));
        // add html to dom
        this.renderer.appendChild(this.grid, imagesWrapper);
        // add images once they are loaded
        /** @type {?} */
        var imgLoad = imagesLoadedMethod(imagesWrapper);
        imgLoad.on('progress', (/**
         * @param {?} instance
         * @param {?} image
         * @return {?}
         */
        function (instance, image) {
            if (image.isLoaded) {
                _this.renderer.appendChild(_this.grid, image.img);
                // unhide image
                _this.renderer.setStyle(image.img, 'display', 'block');
                _this.msnry.appended(image.img);
                _this.msnry.reloadItems();
            }
        }));
    };
    /**
     * @private
     * @return {?}
     */
    MasonryGalleryComponent.prototype.getImageClass = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var className = this.mansonryItemSelectorClass;
        if (this.imageClasses && this.imageClasses.length > 0) {
            /** @type {?} */
            var customClass = this.imageClasses.join(' ');
            className += ' ' + customClass;
        }
        return className;
    };
    /**
     * @private
     * @return {?}
     */
    MasonryGalleryComponent.prototype.getImageId = /**
     * @private
     * @return {?}
     */
    function () {
        return this.galleryGuid + '_' + utilities.newGuid();
    };
    MasonryGalleryComponent.decorators = [
        { type: Component, args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'ngx-masonry-gallery',
                    template: '<div [id]="galleryGuid"></div>'
                }] }
    ];
    /** @nocollapse */
    MasonryGalleryComponent.ctorParameters = function () { return [
        { type: Renderer2 }
    ]; };
    MasonryGalleryComponent.propDecorators = {
        images: [{ type: Input }],
        width: [{ type: Input }],
        gutter: [{ type: Input }],
        verticalGutter: [{ type: Input }],
        imageClasses: [{ type: Input }],
        clickImage: [{ type: Output }],
        removeComplete: [{ type: Output }],
        layoutComplete: [{ type: Output }]
    };
    return MasonryGalleryComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MasonryGalleryModule = /** @class */ (function () {
    function MasonryGalleryModule() {
    }
    MasonryGalleryModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    declarations: [
                        MasonryGalleryComponent,
                    ],
                    exports: [
                        MasonryGalleryComponent,
                    ],
                },] }
    ];
    return MasonryGalleryModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IMasonryGalleryImage = /** @class */ (function () {
    function IMasonryGalleryImage() {
    }
    return IMasonryGalleryImage;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { IMasonryGalleryImage, MasonryGalleryComponent, MasonryGalleryModule };
//# sourceMappingURL=ngx-masonry-gallery.js.map
