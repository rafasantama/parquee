{"version":3,"file":"angular-count-to.umd.min.js","sources":["../../src/directives/count-to.directive.ts","../../src/modules/count-to.module.ts"],"sourcesContent":["import { Directive, OnChanges, ElementRef, Input, OnInit } from '@angular/core';\nexport class CountToDirective implements OnChanges, OnInit {\n  \n  CountTo: number;\n  \n  from = 0;\n  \n  duration = 4;\n\n  e = this.el.nativeElement;\n  num: number;\n  refreshInterval = 30;\n  steps: number;\n  step = 0;\n  increment: number;\n/**\n * @param {?} el\n */\nconstructor(private el: ElementRef) {\n\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n\n  }\n/**\n * @return {?}\n */\nngOnChanges() {\n    if (this.CountTo) {\n      this.start();\n    }\n  }\n/**\n * @return {?}\n */\ncalculate() {\n    this.duration = this.duration * 1000;\n\n    this.steps = Math.ceil(this.duration / this.refreshInterval);\n    this.increment = ((this.CountTo - this.from) / this.steps);\n    this.num = this.from;\n  }\n/**\n * @return {?}\n */\ntick() {\n    setTimeout(() => {\n      this.num += this.increment;\n      this.step++;\n      if (this.step >= this.steps) {\n        this.num = this.CountTo;\n        this.e.textContent = this.CountTo;\n      } else {\n        this.e.textContent = Math.round(this.num);\n        this.tick();\n      }\n    }, this.refreshInterval);\n  }\n/**\n * @return {?}\n */\nstart() {\n    this.calculate();\n    this.tick();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[CountTo]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'CountTo': [{ type: Input },],\n'from': [{ type: Input },],\n'duration': [{ type: Input },],\n};\n}\n\nfunction CountToDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nCountToDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCountToDirective.ctorParameters;\n/** @type {?} */\nCountToDirective.propDecorators;\n/** @type {?} */\nCountToDirective.prototype.CountTo;\n/** @type {?} */\nCountToDirective.prototype.from;\n/** @type {?} */\nCountToDirective.prototype.duration;\n/** @type {?} */\nCountToDirective.prototype.e;\n/** @type {?} */\nCountToDirective.prototype.num;\n/** @type {?} */\nCountToDirective.prototype.refreshInterval;\n/** @type {?} */\nCountToDirective.prototype.steps;\n/** @type {?} */\nCountToDirective.prototype.step;\n/** @type {?} */\nCountToDirective.prototype.increment;\n/** @type {?} */\nCountToDirective.prototype.el;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { CountToDirective } from './../directives/count-to.directive';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nexport class CountToModule {\n/**\n * Use in AppModule\n * @return {?}\n */\npublic static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: CountToModule,\n            providers: []\n        };\n    }\n/**\n * Use in features modules with lazy loading\n * @return {?}\n */\npublic static forChild(): ModuleWithProviders {\n        return {\n            ngModule: CountToModule,\n            providers: []\n        };\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    declarations: [\n        CountToDirective\n        // Pipes.\n        // Directives.\n    ],\n    exports: [\n        CountToDirective\n        // Pipes.\n        // Directives.\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CountToModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCountToModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCountToModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["CountToDirective","el","this","from","duration","e","nativeElement","refreshInterval","step","prototype","ngOnInit","ngOnChanges","CountTo","start","calculate","steps","Math","ceil","increment","num","tick","_this","setTimeout","textContent","round","decorators","type","Directive","args","selector","ctorParameters","ElementRef","propDecorators","Input","CountToModule","forRoot","ngModule","providers","forChild","NgModule","declarations","exports"],"mappings":"qWACA,IAAAA,kBAAA,WAiBA,QAAAA,kBAAsBC,IAAAC,KAAtBD,GAAsBA,GAbpBC,KAAFC,KAES,EAAPD,KAAFE,SAEa,EAAXF,KAAFG,EAEMH,KAAKD,GAAGK,cAAZJ,KAAFK,gBAEoB,GAAlBL,KAAFM,KAES,QASTR,kBAAAS,UAAAC,SAAA,aAMAV,iBAAAS,UAAAE,YAAA,WACQT,KAJKU,SAKPV,KAJKW,SAUXb,iBAAAS,UAAAK,UAAA,WACIZ,KANKE,SAA2B,IAAhBF,KAAKE,SAQrBF,KANKa,MAAQC,KAAKC,KAAKf,KAAKE,SAAWF,KAAKK,iBAO5CL,KANKgB,WAAchB,KAAKU,QAAUV,KAAKC,MAAQD,KAAKa,MAOpDb,KANKiB,IAAMjB,KAAKC,MAWpBH,iBAAAS,UAAAW,KAAA,WAAA,GAAAC,OAAAnB,IACIoB,YARW,WASTD,MARKF,KAAOE,MAAKH,UASjBG,MARKb,OASDa,MARKb,MAAQa,MAAKN,OASpBM,MARKF,IAAME,MAAKT,QAShBS,MARKhB,EAAEkB,YAAcF,MAAKT,UAU1BS,MARKhB,EAAEkB,YAAcP,KAAKQ,MAAMH,MAAKF,KASrCE,MARKD,SAENlB,KAAKK,kBAaZP,iBAAAS,UAAAI,MAAA,WACIX,KAVKY,YAWLZ,KAVKkB,2BAEFpB,kBAAPyB,aACEC,KAAMC,cAURA,UAVmBC,OAWjBC,SAVU,gBAIX7B,iBAAD8B,eAAC,WAAA,QAaAJ,KAAMK,cAAPA,cAVO/B,iBAAPgC,gBAaApB,UAZcc,KAAMO,cAYpBA,QACA9B,OAZWuB,KAAMO,cAYjBA,QACA7B,WAZesB,KAAMO,cAYrBA,QChFA,IAAAC,eAAA,WAAA,QAAAA,wBAOKA,eAALC,QAAK,WADG,OACIC,SAEUF,cADVG,eASPH,cAALI,SAAK,WADG,OACIF,SAEUF,cADVG,+BAMLH,eAAPT,aACEC,KAAMa,cAFRA,SAEkBX,OADdY,cACIxC,kBAIJyC,SACIzC,sBASPkC,cAADJ,eAAC,WAAA"}